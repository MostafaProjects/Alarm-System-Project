
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dfc  08004dc0  08004dc0  00005dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bbc  08005bbc  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005bbc  08005bbc  00006bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bc4  08005bc4  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc4  08005bc4  00006bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc8  08005bc8  00006bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005bcc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  20000064  08005c30  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  08005c30  000076c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114cd  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000263d  00000000  00000000  00018561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  0001aba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc9  00000000  00000000  0001bbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002301e  00000000  00000000  0001c899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001552f  00000000  00000000  0003f8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3d2a  00000000  00000000  00054de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128b10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a4  00000000  00000000  00128b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004da8 	.word	0x08004da8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08004da8 	.word	0x08004da8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f001 f99d 	bl	80018f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f9fb 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 fabf 	bl	8000b40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 fa93 	bl	8000aec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005c6:	f000 fa63 	bl	8000a90 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 80005ca:	f000 fcdb 	bl	8000f84 <SSD1306_Init>
    SSD1306_GotoXY (0,0);
 80005ce:	2100      	movs	r1, #0
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fe41 	bl	8001258 <SSD1306_GotoXY>
    //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
    SSD1306_Puts ("Enter code:", &Font_11x18, 1);
 80005d6:	2201      	movs	r2, #1
 80005d8:	49b1      	ldr	r1, [pc, #708]	@ (80008a0 <main+0x2f0>)
 80005da:	48b2      	ldr	r0, [pc, #712]	@ (80008a4 <main+0x2f4>)
 80005dc:	f000 fed0 	bl	8001380 <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 80005e0:	211e      	movs	r1, #30
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 fe38 	bl	8001258 <SSD1306_GotoXY>
    SSD1306_UpdateScreen();
 80005e8:	f000 fd90 	bl	800110c <SSD1306_UpdateScreen>
    SSD1306_UpdateScreen();
 80005ec:	f000 fd8e 	bl	800110c <SSD1306_UpdateScreen>
    HAL_Delay (500);
 80005f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005f4:	f001 f9c0 	bl	8001978 <HAL_Delay>


        HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);   // Pull the C0 LOW
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005fe:	48aa      	ldr	r0, [pc, #680]	@ (80008a8 <main+0x2f8>)
 8000600:	f001 fc6c 	bl	8001edc <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);   // Pull the C1 LOW
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	48a7      	ldr	r0, [pc, #668]	@ (80008a8 <main+0x2f8>)
 800060a:	f001 fc67 	bl	8001edc <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);   // Pull the C2 LOW
 800060e:	2201      	movs	r2, #1
 8000610:	2120      	movs	r1, #32
 8000612:	48a5      	ldr	r0, [pc, #660]	@ (80008a8 <main+0x2f8>)
 8000614:	f001 fc62 	bl	8001edc <HAL_GPIO_WritePin>
        		HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2108      	movs	r1, #8
 800061c:	48a2      	ldr	r0, [pc, #648]	@ (80008a8 <main+0x2f8>)
 800061e:	f001 fc5d 	bl	8001edc <HAL_GPIO_WritePin>




      SSD1306_GotoXY (0, 30);
 8000622:	211e      	movs	r1, #30
 8000624:	2000      	movs	r0, #0
 8000626:	f000 fe17 	bl	8001258 <SSD1306_GotoXY>
      SSD1306_Puts ("4 ou 6?", &Font_11x18, 1);
 800062a:	2201      	movs	r2, #1
 800062c:	499c      	ldr	r1, [pc, #624]	@ (80008a0 <main+0x2f0>)
 800062e:	489f      	ldr	r0, [pc, #636]	@ (80008ac <main+0x2fc>)
 8000630:	f000 fea6 	bl	8001380 <SSD1306_Puts>
      SSD1306_UpdateScreen();
 8000634:	f000 fd6a 	bl	800110c <SSD1306_UpdateScreen>
      HAL_Delay (500);
 8000638:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800063c:	f001 f99c 	bl	8001978 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  int cursor_x = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	@ 0x24
  int etat = -1;
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	623b      	str	r3, [r7, #32]
  int i = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  int passwordLength = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
  char motDePasse[7] = "";
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2100      	movs	r1, #0
 800065c:	460a      	mov	r2, r1
 800065e:	801a      	strh	r2, [r3, #0]
 8000660:	460a      	mov	r2, r1
 8000662:	709a      	strb	r2, [r3, #2]
  char armMode;
  int timerEcoule = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]

  volatile uint32_t start_time = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
		  		  HAL_GPIO_WritePin(GPIOA, Son_Alarme_Pin, GPIO_PIN_RESET);

	  }*/


	  if (flag) {
 800066c:	4b90      	ldr	r3, [pc, #576]	@ (80008b0 <main+0x300>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0fb      	beq.n	800066c <main+0xbc>
	          //key = Get_Key(); // Get the key pressed

	          if(etat == -1){
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067a:	d135      	bne.n	80006e8 <main+0x138>


	        	  if(key == '4'){
 800067c:	4b8d      	ldr	r3, [pc, #564]	@ (80008b4 <main+0x304>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b34      	cmp	r3, #52	@ 0x34
 8000682:	d116      	bne.n	80006b2 <main+0x102>
	        		  passwordLength = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	61bb      	str	r3, [r7, #24]
	        		  SSD1306_GotoXY(0, 30);
 8000688:	211e      	movs	r1, #30
 800068a:	2000      	movs	r0, #0
 800068c:	f000 fde4 	bl	8001258 <SSD1306_GotoXY>
	        		  	        		  	        	  // Display the error message
	        		  SSD1306_Puts("               ", &Font_11x18, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	4983      	ldr	r1, [pc, #524]	@ (80008a0 <main+0x2f0>)
 8000694:	4888      	ldr	r0, [pc, #544]	@ (80008b8 <main+0x308>)
 8000696:	f000 fe73 	bl	8001380 <SSD1306_Puts>
	        		  	        	  	        	  // Update the screen
	        		  SSD1306_UpdateScreen();
 800069a:	f000 fd37 	bl	800110c <SSD1306_UpdateScreen>
	        		  HAL_Delay (500);
 800069e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006a2:	f001 f969 	bl	8001978 <HAL_Delay>


	        		  etat = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
	        		  flag = 0;
 80006aa:	4b81      	ldr	r3, [pc, #516]	@ (80008b0 <main+0x300>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	e7dc      	b.n	800066c <main+0xbc>

	        	  }
	        	  else if(key == '6'){
 80006b2:	4b80      	ldr	r3, [pc, #512]	@ (80008b4 <main+0x304>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b36      	cmp	r3, #54	@ 0x36
 80006b8:	d1d8      	bne.n	800066c <main+0xbc>
	        		  passwordLength = 6;
 80006ba:	2306      	movs	r3, #6
 80006bc:	61bb      	str	r3, [r7, #24]
	        		  SSD1306_GotoXY(0, 30);
 80006be:	211e      	movs	r1, #30
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 fdc9 	bl	8001258 <SSD1306_GotoXY>
	        		  	        		  	        	  // Display the error message
	        		  SSD1306_Puts("               ", &Font_11x18, 1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	4975      	ldr	r1, [pc, #468]	@ (80008a0 <main+0x2f0>)
 80006ca:	487b      	ldr	r0, [pc, #492]	@ (80008b8 <main+0x308>)
 80006cc:	f000 fe58 	bl	8001380 <SSD1306_Puts>
	        		  	        	  	        	  // Update the screen
	        		  SSD1306_UpdateScreen();
 80006d0:	f000 fd1c 	bl	800110c <SSD1306_UpdateScreen>
	        		  HAL_Delay (500);
 80006d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006d8:	f001 f94e 	bl	8001978 <HAL_Delay>


	        		  etat = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
	        		  flag = 0;
 80006e0:	4b73      	ldr	r3, [pc, #460]	@ (80008b0 <main+0x300>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	e7c1      	b.n	800066c <main+0xbc>

	        	  }

	          }
	          else if(etat == 0){
 80006e8:	6a3b      	ldr	r3, [r7, #32]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d13b      	bne.n	8000766 <main+0x1b6>
	        	  sprintf(hold, "%c", '*');
 80006ee:	222a      	movs	r2, #42	@ 0x2a
 80006f0:	4972      	ldr	r1, [pc, #456]	@ (80008bc <main+0x30c>)
 80006f2:	4873      	ldr	r0, [pc, #460]	@ (80008c0 <main+0x310>)
 80006f4:	f003 feb8 	bl	8004468 <siprintf>
	        	  motDePasse[i] = key;
 80006f8:	4b6e      	ldr	r3, [pc, #440]	@ (80008b4 <main+0x304>)
 80006fa:	7819      	ldrb	r1, [r3, #0]
 80006fc:	f107 0208 	add.w	r2, r7, #8
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	4413      	add	r3, r2
 8000704:	460a      	mov	r2, r1
 8000706:	701a      	strb	r2, [r3, #0]
	        	  i++;
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	3301      	adds	r3, #1
 800070c:	61fb      	str	r3, [r7, #28]

	        	  HAL_UART_Transmit(&huart2, (uint8_t *)hold, strlen(hold), 100); // Debug output via UART
 800070e:	486c      	ldr	r0, [pc, #432]	@ (80008c0 <main+0x310>)
 8000710:	f7ff fd7e 	bl	8000210 <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b29a      	uxth	r2, r3
 8000718:	2364      	movs	r3, #100	@ 0x64
 800071a:	4969      	ldr	r1, [pc, #420]	@ (80008c0 <main+0x310>)
 800071c:	4869      	ldr	r0, [pc, #420]	@ (80008c4 <main+0x314>)
 800071e:	f003 fae7 	bl	8003cf0 <HAL_UART_Transmit>

	        	  // Display '*' at the current cursor position
	        	  SSD1306_GotoXY(cursor_x, 30); // Set position for the character
 8000722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000724:	b29b      	uxth	r3, r3
 8000726:	211e      	movs	r1, #30
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fd95 	bl	8001258 <SSD1306_GotoXY>
	        	  SSD1306_Puts(hold, &Font_11x18, 1);
 800072e:	2201      	movs	r2, #1
 8000730:	495b      	ldr	r1, [pc, #364]	@ (80008a0 <main+0x2f0>)
 8000732:	4863      	ldr	r0, [pc, #396]	@ (80008c0 <main+0x310>)
 8000734:	f000 fe24 	bl	8001380 <SSD1306_Puts>
	        	  SSD1306_UpdateScreen();
 8000738:	f000 fce8 	bl	800110c <SSD1306_UpdateScreen>

	        	  // Increment cursor_x to move to the next position
	        	  cursor_x += 12; // Adjust spacing as needed based on your font width
 800073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073e:	330c      	adds	r3, #12
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24

        	  	  HAL_Delay(500); // Small delay
 8000742:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000746:	f001 f917 	bl	8001978 <HAL_Delay>
	        	  flag = 0;       // Reset the flag
 800074a:	4b59      	ldr	r3, [pc, #356]	@ (80008b0 <main+0x300>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]

	        	  if(i == passwordLength){
 8000750:	69fa      	ldr	r2, [r7, #28]
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	429a      	cmp	r2, r3
 8000756:	d189      	bne.n	800066c <main+0xbc>
	        		  etat = 1;
 8000758:	2301      	movs	r3, #1
 800075a:	623b      	str	r3, [r7, #32]
	        		  i =0;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
	        		  cursor_x = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
 8000764:	e782      	b.n	800066c <main+0xbc>
	        	  }

	          }

	          else if(etat == 1){
 8000766:	6a3b      	ldr	r3, [r7, #32]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d11d      	bne.n	80007a8 <main+0x1f8>

	        	  SSD1306_GotoXY(0, 30);
 800076c:	211e      	movs	r1, #30
 800076e:	2000      	movs	r0, #0
 8000770:	f000 fd72 	bl	8001258 <SSD1306_GotoXY>
	        	  // Display the error message
	        	  SSD1306_Puts("             ", &Font_11x18, 1);
 8000774:	2201      	movs	r2, #1
 8000776:	494a      	ldr	r1, [pc, #296]	@ (80008a0 <main+0x2f0>)
 8000778:	4853      	ldr	r0, [pc, #332]	@ (80008c8 <main+0x318>)
 800077a:	f000 fe01 	bl	8001380 <SSD1306_Puts>
	        	  // Update the screen
	        	  SSD1306_UpdateScreen();
 800077e:	f000 fcc5 	bl	800110c <SSD1306_UpdateScreen>
	        	  //HAL_Delay(500);  // Small delay before continuing

	        	  if(key == 'A' || key == 'B'){
 8000782:	4b4c      	ldr	r3, [pc, #304]	@ (80008b4 <main+0x304>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b41      	cmp	r3, #65	@ 0x41
 8000788:	d003      	beq.n	8000792 <main+0x1e2>
 800078a:	4b4a      	ldr	r3, [pc, #296]	@ (80008b4 <main+0x304>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b42      	cmp	r3, #66	@ 0x42
 8000790:	d104      	bne.n	800079c <main+0x1ec>
	        		  armMode = key;
 8000792:	4b48      	ldr	r3, [pc, #288]	@ (80008b4 <main+0x304>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	75fb      	strb	r3, [r7, #23]
	        		  etat = 2;
 8000798:	2302      	movs	r3, #2
 800079a:	623b      	str	r3, [r7, #32]
	        	  }
	        	  i = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
	        	  flag = 0;
 80007a0:	4b43      	ldr	r3, [pc, #268]	@ (80008b0 <main+0x300>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	e761      	b.n	800066c <main+0xbc>
	          }
	          else if(etat == 2){
 80007a8:	6a3b      	ldr	r3, [r7, #32]
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	f040 80bb 	bne.w	8000926 <main+0x376>
	        	  sprintf(hold, "%c", key);
 80007b0:	4b40      	ldr	r3, [pc, #256]	@ (80008b4 <main+0x304>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4941      	ldr	r1, [pc, #260]	@ (80008bc <main+0x30c>)
 80007b8:	4841      	ldr	r0, [pc, #260]	@ (80008c0 <main+0x310>)
 80007ba:	f003 fe55 	bl	8004468 <siprintf>


	        	  	        	  HAL_UART_Transmit(&huart2, (uint8_t *)hold, strlen(hold), 100); // Debug output via UART
 80007be:	4840      	ldr	r0, [pc, #256]	@ (80008c0 <main+0x310>)
 80007c0:	f7ff fd26 	bl	8000210 <strlen>
 80007c4:	4603      	mov	r3, r0
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	2364      	movs	r3, #100	@ 0x64
 80007ca:	493d      	ldr	r1, [pc, #244]	@ (80008c0 <main+0x310>)
 80007cc:	483d      	ldr	r0, [pc, #244]	@ (80008c4 <main+0x314>)
 80007ce:	f003 fa8f 	bl	8003cf0 <HAL_UART_Transmit>

	        	  	        	  // Display '*' at the current cursor position
	        	  	        	  SSD1306_GotoXY(cursor_x, 30); // Set position for the character
 80007d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	211e      	movs	r1, #30
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fd3d 	bl	8001258 <SSD1306_GotoXY>
	        	  	        	  SSD1306_Puts(hold, &Font_11x18, 1);
 80007de:	2201      	movs	r2, #1
 80007e0:	492f      	ldr	r1, [pc, #188]	@ (80008a0 <main+0x2f0>)
 80007e2:	4837      	ldr	r0, [pc, #220]	@ (80008c0 <main+0x310>)
 80007e4:	f000 fdcc 	bl	8001380 <SSD1306_Puts>
	        	  	        	  SSD1306_UpdateScreen();
 80007e8:	f000 fc90 	bl	800110c <SSD1306_UpdateScreen>

	        	  	        	  // Increment cursor_x to move to the next position
	        	  	        	  cursor_x += 12; // Adjust spacing as needed based on your font width
 80007ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ee:	330c      	adds	r3, #12
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24

	        	          	  	  //HAL_Delay(500); // Small delay
	        	  	        	  //flag = 0;

	        	  if(key != motDePasse[i]){
 80007f2:	f107 0208 	add.w	r2, r7, #8
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	4413      	add	r3, r2
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	4b2d      	ldr	r3, [pc, #180]	@ (80008b4 <main+0x304>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	429a      	cmp	r2, r3
 8000802:	d011      	beq.n	8000828 <main+0x278>
	        		  etat = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
	        		  	  SSD1306_GotoXY (0, 30);
 8000808:	211e      	movs	r1, #30
 800080a:	2000      	movs	r0, #0
 800080c:	f000 fd24 	bl	8001258 <SSD1306_GotoXY>
	        		      SSD1306_Puts ("Incorrecte", &Font_11x18, 1);
 8000810:	2201      	movs	r2, #1
 8000812:	4923      	ldr	r1, [pc, #140]	@ (80008a0 <main+0x2f0>)
 8000814:	482d      	ldr	r0, [pc, #180]	@ (80008cc <main+0x31c>)
 8000816:	f000 fdb3 	bl	8001380 <SSD1306_Puts>
	        		      SSD1306_UpdateScreen();
 800081a:	f000 fc77 	bl	800110c <SSD1306_UpdateScreen>
	        		      HAL_Delay (500);
 800081e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000822:	f001 f8a9 	bl	8001978 <HAL_Delay>
 8000826:	e071      	b.n	800090c <main+0x35c>
	        	  }

	        	  else if(i == (passwordLength -1)){
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	3b01      	subs	r3, #1
 800082c:	69fa      	ldr	r2, [r7, #28]
 800082e:	429a      	cmp	r2, r3
 8000830:	d16c      	bne.n	800090c <main+0x35c>
	        		  etat = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
	        		  cursor_x = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
	        		  SSD1306_GotoXY (0, 30);
 800083a:	211e      	movs	r1, #30
 800083c:	2000      	movs	r0, #0
 800083e:	f000 fd0b 	bl	8001258 <SSD1306_GotoXY>

	        		  if(armMode == 'A'){
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	2b41      	cmp	r3, #65	@ 0x41
 8000846:	d149      	bne.n	80008dc <main+0x32c>
	        		    SSD1306_Puts ("Arme", &Font_11x18, 1);
 8000848:	2201      	movs	r2, #1
 800084a:	4915      	ldr	r1, [pc, #84]	@ (80008a0 <main+0x2f0>)
 800084c:	4820      	ldr	r0, [pc, #128]	@ (80008d0 <main+0x320>)
 800084e:	f000 fd97 	bl	8001380 <SSD1306_Puts>

	        		    HAL_GPIO_WritePin(GPIOC, ledRouge_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2101      	movs	r1, #1
 8000856:	481f      	ldr	r0, [pc, #124]	@ (80008d4 <main+0x324>)
 8000858:	f001 fb40 	bl	8001edc <HAL_GPIO_WritePin>
	        		    HAL_GPIO_WritePin(GPIOC, ledVert_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2102      	movs	r1, #2
 8000860:	481c      	ldr	r0, [pc, #112]	@ (80008d4 <main+0x324>)
 8000862:	f001 fb3b 	bl	8001edc <HAL_GPIO_WritePin>

	        		    start_time = HAL_GetTick();
 8000866:	f001 f87b 	bl	8001960 <HAL_GetTick>
 800086a:	4603      	mov	r3, r0
 800086c:	607b      	str	r3, [r7, #4]

	        		   while(HAL_GetTick() - start_time <= 10000){}
 800086e:	bf00      	nop
 8000870:	f001 f876 	bl	8001960 <HAL_GetTick>
 8000874:	4602      	mov	r2, r0
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800087e:	4293      	cmp	r3, r2
 8000880:	d9f6      	bls.n	8000870 <main+0x2c0>

	        		   while(1){

	        		    if(HAL_GPIO_ReadPin(GPIOA, SENSOR_Pin)){
 8000882:	2180      	movs	r1, #128	@ 0x80
 8000884:	4814      	ldr	r0, [pc, #80]	@ (80008d8 <main+0x328>)
 8000886:	f001 fb11 	bl	8001eac <HAL_GPIO_ReadPin>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d0f8      	beq.n	8000882 <main+0x2d2>
	        		    	HAL_GPIO_WritePin(GPIOA, Son_Alarme_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000896:	4810      	ldr	r0, [pc, #64]	@ (80008d8 <main+0x328>)
 8000898:	f001 fb20 	bl	8001edc <HAL_GPIO_WritePin>
	        		    	//timerEcoule = 1;
	        		    	break;
 800089c:	e036      	b.n	800090c <main+0x35c>
 800089e:	bf00      	nop
 80008a0:	20000000 	.word	0x20000000
 80008a4:	08004dc0 	.word	0x08004dc0
 80008a8:	40020400 	.word	0x40020400
 80008ac:	08004dcc 	.word	0x08004dcc
 80008b0:	20000124 	.word	0x20000124
 80008b4:	20000080 	.word	0x20000080
 80008b8:	08004dd4 	.word	0x08004dd4
 80008bc:	08004de4 	.word	0x08004de4
 80008c0:	20000120 	.word	0x20000120
 80008c4:	200000d8 	.word	0x200000d8
 80008c8:	08004de8 	.word	0x08004de8
 80008cc:	08004df8 	.word	0x08004df8
 80008d0:	08004e04 	.word	0x08004e04
 80008d4:	40020800 	.word	0x40020800
 80008d8:	40020000 	.word	0x40020000
	        		    }
	        		   }

	        		  }
	        		  else if(armMode == 'B'){
 80008dc:	7dfb      	ldrb	r3, [r7, #23]
 80008de:	2b42      	cmp	r3, #66	@ 0x42
 80008e0:	d114      	bne.n	800090c <main+0x35c>

	        			  HAL_GPIO_WritePin(GPIOC, ledVert_Pin, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2102      	movs	r1, #2
 80008e6:	482a      	ldr	r0, [pc, #168]	@ (8000990 <main+0x3e0>)
 80008e8:	f001 faf8 	bl	8001edc <HAL_GPIO_WritePin>
	        			  HAL_GPIO_WritePin(GPIOC, ledRouge_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2101      	movs	r1, #1
 80008f0:	4827      	ldr	r0, [pc, #156]	@ (8000990 <main+0x3e0>)
 80008f2:	f001 faf3 	bl	8001edc <HAL_GPIO_WritePin>
	        			  HAL_GPIO_WritePin(GPIOA, Son_Alarme_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008fc:	4825      	ldr	r0, [pc, #148]	@ (8000994 <main+0x3e4>)
 80008fe:	f001 faed 	bl	8001edc <HAL_GPIO_WritePin>
	        			  SSD1306_Puts ("Desarme", &Font_11x18, 1);
 8000902:	2201      	movs	r2, #1
 8000904:	4924      	ldr	r1, [pc, #144]	@ (8000998 <main+0x3e8>)
 8000906:	4825      	ldr	r0, [pc, #148]	@ (800099c <main+0x3ec>)
 8000908:	f000 fd3a 	bl	8001380 <SSD1306_Puts>

	        		  }
	        	  }
	        	  SSD1306_UpdateScreen();
 800090c:	f000 fbfe 	bl	800110c <SSD1306_UpdateScreen>
	              HAL_Delay (500);
 8000910:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000914:	f001 f830 	bl	8001978 <HAL_Delay>
	        	  i++;
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	3301      	adds	r3, #1
 800091c:	61fb      	str	r3, [r7, #28]
	        	  flag = 0;
 800091e:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <main+0x3f0>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	e6a2      	b.n	800066c <main+0xbc>

	          }
	          else if(etat == 3){
 8000926:	6a3b      	ldr	r3, [r7, #32]
 8000928:	2b03      	cmp	r3, #3
 800092a:	f43f ae9f 	beq.w	800066c <main+0xbc>

	          }
	          else{

	        	  sprintf(hold, "%c", key);
 800092e:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <main+0x3f4>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	461a      	mov	r2, r3
 8000934:	491c      	ldr	r1, [pc, #112]	@ (80009a8 <main+0x3f8>)
 8000936:	481d      	ldr	r0, [pc, #116]	@ (80009ac <main+0x3fc>)
 8000938:	f003 fd96 	bl	8004468 <siprintf>

	        	  	          HAL_UART_Transmit(&huart2, (uint8_t *)hold, strlen(hold), 100); // Debug output via UART
 800093c:	481b      	ldr	r0, [pc, #108]	@ (80009ac <main+0x3fc>)
 800093e:	f7ff fc67 	bl	8000210 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	2364      	movs	r3, #100	@ 0x64
 8000948:	4918      	ldr	r1, [pc, #96]	@ (80009ac <main+0x3fc>)
 800094a:	4819      	ldr	r0, [pc, #100]	@ (80009b0 <main+0x400>)
 800094c:	f003 f9d0 	bl	8003cf0 <HAL_UART_Transmit>

	        	  	          // Display the key at the current cursor position
	        	  	          SSD1306_GotoXY(cursor_x, 30); // Set position for the character
 8000950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000952:	b29b      	uxth	r3, r3
 8000954:	211e      	movs	r1, #30
 8000956:	4618      	mov	r0, r3
 8000958:	f000 fc7e 	bl	8001258 <SSD1306_GotoXY>
	        	  	          SSD1306_Puts(hold, &Font_11x18, 1);
 800095c:	2201      	movs	r2, #1
 800095e:	490e      	ldr	r1, [pc, #56]	@ (8000998 <main+0x3e8>)
 8000960:	4812      	ldr	r0, [pc, #72]	@ (80009ac <main+0x3fc>)
 8000962:	f000 fd0d 	bl	8001380 <SSD1306_Puts>
	        	  	          SSD1306_UpdateScreen();
 8000966:	f000 fbd1 	bl	800110c <SSD1306_UpdateScreen>

	        	  	          // Move cursor to the right for the next character
	        	  	          cursor_x += 11; // Advance by character width
 800096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096c:	330b      	adds	r3, #11
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
	        	  	          if (cursor_x >= 128) { // Reset position if at the end of the line
 8000970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000972:	2b7f      	cmp	r3, #127	@ 0x7f
 8000974:	dd03      	ble.n	800097e <main+0x3ce>
	        	  	              cursor_x = 0; // Start from the left again
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
	        	  	              SSD1306_Clear(); // Clear the screen
 800097a:	f000 fd26 	bl	80013ca <SSD1306_Clear>
	        	  	          }

	        	  	          HAL_Delay(500); // Small delay
 800097e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000982:	f000 fff9 	bl	8001978 <HAL_Delay>
	        	  	          flag = 0;       // Reset the flag
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <main+0x3f0>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
	  if (flag) {
 800098c:	e66e      	b.n	800066c <main+0xbc>
 800098e:	bf00      	nop
 8000990:	40020800 	.word	0x40020800
 8000994:	40020000 	.word	0x40020000
 8000998:	20000000 	.word	0x20000000
 800099c:	08004e0c 	.word	0x08004e0c
 80009a0:	20000124 	.word	0x20000124
 80009a4:	20000080 	.word	0x20000080
 80009a8:	08004de4 	.word	0x08004de4
 80009ac:	20000120 	.word	0x20000120
 80009b0:	200000d8 	.word	0x200000d8

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b094      	sub	sp, #80	@ 0x50
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	2234      	movs	r2, #52	@ 0x34
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f003 fd70 	bl	80044a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000a88 <SystemClock_Config+0xd4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e0:	4a29      	ldr	r2, [pc, #164]	@ (8000a88 <SystemClock_Config+0xd4>)
 80009e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e8:	4b27      	ldr	r3, [pc, #156]	@ (8000a88 <SystemClock_Config+0xd4>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009f4:	2300      	movs	r3, #0
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	4b24      	ldr	r3, [pc, #144]	@ (8000a8c <SystemClock_Config+0xd8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a00:	4a22      	ldr	r2, [pc, #136]	@ (8000a8c <SystemClock_Config+0xd8>)
 8000a02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b20      	ldr	r3, [pc, #128]	@ (8000a8c <SystemClock_Config+0xd8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a20:	2302      	movs	r3, #2
 8000a22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a28:	2310      	movs	r3, #16
 8000a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a2c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a30:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a32:	2304      	movs	r3, #4
 8000a34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fbc4 	bl	80031d0 <HAL_RCC_OscConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a4e:	f000 fa93 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a52:	230f      	movs	r3, #15
 8000a54:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a56:	2302      	movs	r3, #2
 8000a58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 f832 	bl	8002ad8 <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a7a:	f000 fa7d 	bl	8000f78 <Error_Handler>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3750      	adds	r7, #80	@ 0x50
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40007000 	.word	0x40007000

08000a90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000a96:	4a13      	ldr	r2, [pc, #76]	@ (8000ae4 <MX_I2C1_Init+0x54>)
 8000a98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000a9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ae8 <MX_I2C1_Init+0x58>)
 8000a9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000aae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ab2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <MX_I2C1_Init+0x50>)
 8000ace:	f001 fa37 	bl	8001f40 <HAL_I2C_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ad8:	f000 fa4e 	bl	8000f78 <Error_Handler>
  /* USER CODE BEGIN I2C1_Init 2 */


  /* USER CODE END I2C1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000084 	.word	0x20000084
 8000ae4:	40005400 	.word	0x40005400
 8000ae8:	00061a80 	.word	0x00061a80

08000aec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	@ (8000b3c <MX_USART2_UART_Init+0x50>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000af6:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000af8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000afc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <MX_USART2_UART_Init+0x4c>)
 8000b24:	f003 f894 	bl	8003c50 <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b2e:	f000 fa23 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000d8 	.word	0x200000d8
 8000b3c:	40004400 	.word	0x40004400

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	@ 0x28
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b59      	ldr	r3, [pc, #356]	@ (8000cc0 <MX_GPIO_Init+0x180>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a58      	ldr	r2, [pc, #352]	@ (8000cc0 <MX_GPIO_Init+0x180>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b56      	ldr	r3, [pc, #344]	@ (8000cc0 <MX_GPIO_Init+0x180>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b52      	ldr	r3, [pc, #328]	@ (8000cc0 <MX_GPIO_Init+0x180>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a51      	ldr	r2, [pc, #324]	@ (8000cc0 <MX_GPIO_Init+0x180>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b4f      	ldr	r3, [pc, #316]	@ (8000cc0 <MX_GPIO_Init+0x180>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	4b4b      	ldr	r3, [pc, #300]	@ (8000cc0 <MX_GPIO_Init+0x180>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a4a      	ldr	r2, [pc, #296]	@ (8000cc0 <MX_GPIO_Init+0x180>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b48      	ldr	r3, [pc, #288]	@ (8000cc0 <MX_GPIO_Init+0x180>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b44      	ldr	r3, [pc, #272]	@ (8000cc0 <MX_GPIO_Init+0x180>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a43      	ldr	r2, [pc, #268]	@ (8000cc0 <MX_GPIO_Init+0x180>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b41      	ldr	r3, [pc, #260]	@ (8000cc0 <MX_GPIO_Init+0x180>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ledRouge_Pin|ledVert_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2103      	movs	r1, #3
 8000bca:	483e      	ldr	r0, [pc, #248]	@ (8000cc4 <MX_GPIO_Init+0x184>)
 8000bcc:	f001 f986 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|Son_Alarme_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000bd6:	483c      	ldr	r0, [pc, #240]	@ (8000cc8 <MX_GPIO_Init+0x188>)
 8000bd8:	f001 f980 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000be2:	483a      	ldr	r0, [pc, #232]	@ (8000ccc <MX_GPIO_Init+0x18c>)
 8000be4:	f001 f97a 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ledRouge_Pin ledVert_Pin */
  GPIO_InitStruct.Pin = ledRouge_Pin|ledVert_Pin;
 8000be8:	2303      	movs	r3, #3
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4831      	ldr	r0, [pc, #196]	@ (8000cc4 <MX_GPIO_Init+0x184>)
 8000c00:	f000 ffc0 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 Son_Alarme_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|Son_Alarme_Pin;
 8000c04:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	482a      	ldr	r0, [pc, #168]	@ (8000cc8 <MX_GPIO_Init+0x188>)
 8000c1e:	f000 ffb1 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_Pin */
  GPIO_InitStruct.Pin = SENSOR_Pin;
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4824      	ldr	r0, [pc, #144]	@ (8000cc8 <MX_GPIO_Init+0x188>)
 8000c36:	f000 ffa5 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000c3a:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	481e      	ldr	r0, [pc, #120]	@ (8000ccc <MX_GPIO_Init+0x18c>)
 8000c54:	f000 ff96 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000c58:	2380      	movs	r3, #128	@ 0x80
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c5c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4815      	ldr	r0, [pc, #84]	@ (8000cc4 <MX_GPIO_Init+0x184>)
 8000c6e:	f000 ff89 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000c72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c78:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	480f      	ldr	r0, [pc, #60]	@ (8000cc8 <MX_GPIO_Init+0x188>)
 8000c8a:	f000 ff7b 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000c8e:	2340      	movs	r3, #64	@ 0x40
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c92:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480a      	ldr	r0, [pc, #40]	@ (8000ccc <MX_GPIO_Init+0x18c>)
 8000ca4:	f000 ff6e 	bl	8001b84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	2017      	movs	r0, #23
 8000cae:	f000 ff3f 	bl	8001b30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cb2:	2017      	movs	r0, #23
 8000cb4:	f000 ff58 	bl	8001b68 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	@ 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020800 	.word	0x40020800
 8000cc8:	40020000 	.word	0x40020000
 8000ccc:	40020400 	.word	0x40020400

08000cd0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
	flag = 1;
 8000cda:	4b99      	ldr	r3, [pc, #612]	@ (8000f40 <HAL_GPIO_EXTI_Callback+0x270>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	601a      	str	r2, [r3, #0]

	if (GPIO_Pin == KR0_Pin || GPIO_Pin == KR1_Pin || GPIO_Pin == KR2_Pin || GPIO_Pin == KR3_Pin) {
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	2b40      	cmp	r3, #64	@ 0x40
 8000ce4:	d00b      	beq.n	8000cfe <HAL_GPIO_EXTI_Callback+0x2e>
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	2b80      	cmp	r3, #128	@ 0x80
 8000cea:	d008      	beq.n	8000cfe <HAL_GPIO_EXTI_Callback+0x2e>
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cf2:	d004      	beq.n	8000cfe <HAL_GPIO_EXTI_Callback+0x2e>
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cfa:	f040 811d 	bne.w	8000f38 <HAL_GPIO_EXTI_Callback+0x268>
	        //COLUMN 3
		HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d04:	488f      	ldr	r0, [pc, #572]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000d06:	f001 f8e9 	bl	8001edc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	488d      	ldr	r0, [pc, #564]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000d10:	f001 f8e4 	bl	8001edc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000d14:	2200      	movs	r2, #0
 8000d16:	2120      	movs	r1, #32
 8000d18:	488a      	ldr	r0, [pc, #552]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000d1a:	f001 f8df 	bl	8001edc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2108      	movs	r1, #8
 8000d22:	4888      	ldr	r0, [pc, #544]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000d24:	f001 f8da 	bl	8001edc <HAL_GPIO_WritePin>


	        if (HAL_GPIO_ReadPin(KR0_GPIO_Port, KR0_Pin)){
 8000d28:	2140      	movs	r1, #64	@ 0x40
 8000d2a:	4886      	ldr	r0, [pc, #536]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000d2c:	f001 f8be 	bl	8001eac <HAL_GPIO_ReadPin>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_EXTI_Callback+0x6e>
	        	key = '1';
 8000d36:	4b84      	ldr	r3, [pc, #528]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000d38:	2231      	movs	r2, #49	@ 0x31
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	e021      	b.n	8000d82 <HAL_GPIO_EXTI_Callback+0xb2>
	        }
	        else if (HAL_GPIO_ReadPin(KR1_GPIO_Port, KR1_Pin)){
 8000d3e:	2180      	movs	r1, #128	@ 0x80
 8000d40:	4882      	ldr	r0, [pc, #520]	@ (8000f4c <HAL_GPIO_EXTI_Callback+0x27c>)
 8000d42:	f001 f8b3 	bl	8001eac <HAL_GPIO_ReadPin>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_EXTI_Callback+0x84>
	        	key = '4';
 8000d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000d4e:	2234      	movs	r2, #52	@ 0x34
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	e016      	b.n	8000d82 <HAL_GPIO_EXTI_Callback+0xb2>
	        }
	        else if (HAL_GPIO_ReadPin(KR2_GPIO_Port, KR2_Pin)){
 8000d54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d58:	487d      	ldr	r0, [pc, #500]	@ (8000f50 <HAL_GPIO_EXTI_Callback+0x280>)
 8000d5a:	f001 f8a7 	bl	8001eac <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d003      	beq.n	8000d6c <HAL_GPIO_EXTI_Callback+0x9c>
	        	key = '7';
 8000d64:	4b78      	ldr	r3, [pc, #480]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000d66:	2237      	movs	r2, #55	@ 0x37
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e00a      	b.n	8000d82 <HAL_GPIO_EXTI_Callback+0xb2>
	        }
	        else if (HAL_GPIO_ReadPin(KR3_GPIO_Port, KR3_Pin)){
 8000d6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d70:	4877      	ldr	r0, [pc, #476]	@ (8000f50 <HAL_GPIO_EXTI_Callback+0x280>)
 8000d72:	f001 f89b 	bl	8001eac <HAL_GPIO_ReadPin>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <HAL_GPIO_EXTI_Callback+0xb2>
	        	key = '*';
 8000d7c:	4b72      	ldr	r3, [pc, #456]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000d7e:	222a      	movs	r2, #42	@ 0x2a
 8000d80:	701a      	strb	r2, [r3, #0]
	        }


	        //COLUMN 2
	        	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d88:	486e      	ldr	r0, [pc, #440]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000d8a:	f001 f8a7 	bl	8001edc <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2110      	movs	r1, #16
 8000d92:	486c      	ldr	r0, [pc, #432]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000d94:	f001 f8a2 	bl	8001edc <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2120      	movs	r1, #32
 8000d9c:	4869      	ldr	r0, [pc, #420]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000d9e:	f001 f89d 	bl	8001edc <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000da2:	2200      	movs	r2, #0
 8000da4:	2108      	movs	r1, #8
 8000da6:	4867      	ldr	r0, [pc, #412]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000da8:	f001 f898 	bl	8001edc <HAL_GPIO_WritePin>

	        if (HAL_GPIO_ReadPin(KR0_GPIO_Port, KR0_Pin)){
 8000dac:	2140      	movs	r1, #64	@ 0x40
 8000dae:	4865      	ldr	r0, [pc, #404]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000db0:	f001 f87c 	bl	8001eac <HAL_GPIO_ReadPin>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_EXTI_Callback+0xf2>
	        	key = '2';
 8000dba:	4b63      	ldr	r3, [pc, #396]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000dbc:	2232      	movs	r2, #50	@ 0x32
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	e021      	b.n	8000e06 <HAL_GPIO_EXTI_Callback+0x136>
	        }
	        else if (HAL_GPIO_ReadPin(KR1_GPIO_Port, KR1_Pin)){
 8000dc2:	2180      	movs	r1, #128	@ 0x80
 8000dc4:	4861      	ldr	r0, [pc, #388]	@ (8000f4c <HAL_GPIO_EXTI_Callback+0x27c>)
 8000dc6:	f001 f871 	bl	8001eac <HAL_GPIO_ReadPin>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x108>
	        	key = '5';
 8000dd0:	4b5d      	ldr	r3, [pc, #372]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000dd2:	2235      	movs	r2, #53	@ 0x35
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e016      	b.n	8000e06 <HAL_GPIO_EXTI_Callback+0x136>
	        }
	        else if (HAL_GPIO_ReadPin(KR2_GPIO_Port, KR2_Pin)){
 8000dd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ddc:	485c      	ldr	r0, [pc, #368]	@ (8000f50 <HAL_GPIO_EXTI_Callback+0x280>)
 8000dde:	f001 f865 	bl	8001eac <HAL_GPIO_ReadPin>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_EXTI_Callback+0x120>
	        	key = '8';
 8000de8:	4b57      	ldr	r3, [pc, #348]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000dea:	2238      	movs	r2, #56	@ 0x38
 8000dec:	701a      	strb	r2, [r3, #0]
 8000dee:	e00a      	b.n	8000e06 <HAL_GPIO_EXTI_Callback+0x136>
	        }
	        else if (HAL_GPIO_ReadPin(KR3_GPIO_Port, KR3_Pin)){
 8000df0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df4:	4856      	ldr	r0, [pc, #344]	@ (8000f50 <HAL_GPIO_EXTI_Callback+0x280>)
 8000df6:	f001 f859 	bl	8001eac <HAL_GPIO_ReadPin>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <HAL_GPIO_EXTI_Callback+0x136>
	        	key = '0';
 8000e00:	4b51      	ldr	r3, [pc, #324]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000e02:	2230      	movs	r2, #48	@ 0x30
 8000e04:	701a      	strb	r2, [r3, #0]
	        }

	        //COLUMN 1
	        	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e0c:	484d      	ldr	r0, [pc, #308]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000e0e:	f001 f865 	bl	8001edc <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 8000e12:	2200      	movs	r2, #0
 8000e14:	2110      	movs	r1, #16
 8000e16:	484b      	ldr	r0, [pc, #300]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000e18:	f001 f860 	bl	8001edc <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2120      	movs	r1, #32
 8000e20:	4848      	ldr	r0, [pc, #288]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000e22:	f001 f85b 	bl	8001edc <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 8000e26:	2200      	movs	r2, #0
 8000e28:	2108      	movs	r1, #8
 8000e2a:	4846      	ldr	r0, [pc, #280]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000e2c:	f001 f856 	bl	8001edc <HAL_GPIO_WritePin>

	        if (HAL_GPIO_ReadPin(KR0_GPIO_Port, KR0_Pin)){
 8000e30:	2140      	movs	r1, #64	@ 0x40
 8000e32:	4844      	ldr	r0, [pc, #272]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000e34:	f001 f83a 	bl	8001eac <HAL_GPIO_ReadPin>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_EXTI_Callback+0x176>
	        	key = '3';
 8000e3e:	4b42      	ldr	r3, [pc, #264]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000e40:	2233      	movs	r2, #51	@ 0x33
 8000e42:	701a      	strb	r2, [r3, #0]
 8000e44:	e021      	b.n	8000e8a <HAL_GPIO_EXTI_Callback+0x1ba>
	        }
	        else if (HAL_GPIO_ReadPin(KR1_GPIO_Port, KR1_Pin)){
 8000e46:	2180      	movs	r1, #128	@ 0x80
 8000e48:	4840      	ldr	r0, [pc, #256]	@ (8000f4c <HAL_GPIO_EXTI_Callback+0x27c>)
 8000e4a:	f001 f82f 	bl	8001eac <HAL_GPIO_ReadPin>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_EXTI_Callback+0x18c>
	        	key = '6';
 8000e54:	4b3c      	ldr	r3, [pc, #240]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000e56:	2236      	movs	r2, #54	@ 0x36
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	e016      	b.n	8000e8a <HAL_GPIO_EXTI_Callback+0x1ba>
	        }
	        else if (HAL_GPIO_ReadPin(KR2_GPIO_Port, KR2_Pin)){
 8000e5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e60:	483b      	ldr	r0, [pc, #236]	@ (8000f50 <HAL_GPIO_EXTI_Callback+0x280>)
 8000e62:	f001 f823 	bl	8001eac <HAL_GPIO_ReadPin>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_EXTI_Callback+0x1a4>
	        	key = '9';
 8000e6c:	4b36      	ldr	r3, [pc, #216]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000e6e:	2239      	movs	r2, #57	@ 0x39
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e00a      	b.n	8000e8a <HAL_GPIO_EXTI_Callback+0x1ba>

	        }
	        else if (HAL_GPIO_ReadPin(KR3_GPIO_Port, KR3_Pin)){
 8000e74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e78:	4835      	ldr	r0, [pc, #212]	@ (8000f50 <HAL_GPIO_EXTI_Callback+0x280>)
 8000e7a:	f001 f817 	bl	8001eac <HAL_GPIO_ReadPin>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <HAL_GPIO_EXTI_Callback+0x1ba>
	        	key = '#';
 8000e84:	4b30      	ldr	r3, [pc, #192]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000e86:	2223      	movs	r2, #35	@ 0x23
 8000e88:	701a      	strb	r2, [r3, #0]
	        }

	        //COLUMN 0
	        	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e90:	482c      	ldr	r0, [pc, #176]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000e92:	f001 f823 	bl	8001edc <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000e96:	2200      	movs	r2, #0
 8000e98:	2110      	movs	r1, #16
 8000e9a:	482a      	ldr	r0, [pc, #168]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000e9c:	f001 f81e 	bl	8001edc <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	4827      	ldr	r0, [pc, #156]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000ea6:	f001 f819 	bl	8001edc <HAL_GPIO_WritePin>
	        	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2108      	movs	r1, #8
 8000eae:	4825      	ldr	r0, [pc, #148]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000eb0:	f001 f814 	bl	8001edc <HAL_GPIO_WritePin>

	        if (HAL_GPIO_ReadPin(KR0_GPIO_Port, KR0_Pin)){
 8000eb4:	2140      	movs	r1, #64	@ 0x40
 8000eb6:	4823      	ldr	r0, [pc, #140]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000eb8:	f000 fff8 	bl	8001eac <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_EXTI_Callback+0x1fa>
	        	key = 'A';
 8000ec2:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000ec4:	2241      	movs	r2, #65	@ 0x41
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	e021      	b.n	8000f0e <HAL_GPIO_EXTI_Callback+0x23e>
	        }
	        else if (HAL_GPIO_ReadPin(KR1_GPIO_Port, KR1_Pin)){
 8000eca:	2180      	movs	r1, #128	@ 0x80
 8000ecc:	481f      	ldr	r0, [pc, #124]	@ (8000f4c <HAL_GPIO_EXTI_Callback+0x27c>)
 8000ece:	f000 ffed 	bl	8001eac <HAL_GPIO_ReadPin>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x210>
	        	key = 'B';
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000eda:	2242      	movs	r2, #66	@ 0x42
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	e016      	b.n	8000f0e <HAL_GPIO_EXTI_Callback+0x23e>
	        }
	        else if (HAL_GPIO_ReadPin(KR2_GPIO_Port, KR2_Pin)){
 8000ee0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ee4:	481a      	ldr	r0, [pc, #104]	@ (8000f50 <HAL_GPIO_EXTI_Callback+0x280>)
 8000ee6:	f000 ffe1 	bl	8001eac <HAL_GPIO_ReadPin>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_EXTI_Callback+0x228>
	        	key = 'C';
 8000ef0:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000ef2:	2243      	movs	r2, #67	@ 0x43
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	e00a      	b.n	8000f0e <HAL_GPIO_EXTI_Callback+0x23e>
	        }
	        else if (HAL_GPIO_ReadPin(KR3_GPIO_Port, KR3_Pin)){
 8000ef8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000efc:	4814      	ldr	r0, [pc, #80]	@ (8000f50 <HAL_GPIO_EXTI_Callback+0x280>)
 8000efe:	f000 ffd5 	bl	8001eac <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d002      	beq.n	8000f0e <HAL_GPIO_EXTI_Callback+0x23e>
	        	key = 'D';
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x278>)
 8000f0a:	2244      	movs	r2, #68	@ 0x44
 8000f0c:	701a      	strb	r2, [r3, #0]
	        }

	        HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);   // Pull the C0 LOW
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f14:	480b      	ldr	r0, [pc, #44]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000f16:	f000 ffe1 	bl	8001edc <HAL_GPIO_WritePin>
	        		HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);   // Pull the C1 LOW
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	4809      	ldr	r0, [pc, #36]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000f20:	f000 ffdc 	bl	8001edc <HAL_GPIO_WritePin>
	        		HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);   // Pull the C2 LOW
 8000f24:	2201      	movs	r2, #1
 8000f26:	2120      	movs	r1, #32
 8000f28:	4806      	ldr	r0, [pc, #24]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000f2a:	f000 ffd7 	bl	8001edc <HAL_GPIO_WritePin>
	        		HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2108      	movs	r1, #8
 8000f32:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <HAL_GPIO_EXTI_Callback+0x274>)
 8000f34:	f000 ffd2 	bl	8001edc <HAL_GPIO_WritePin>
			else if ((HAL_GPIO_ReadPin (KC3_GPIO_Port, KC3_Pin)))   // if R0 is HIGH
											{
												key = 'D';
											}
		}*/
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000124 	.word	0x20000124
 8000f44:	40020400 	.word	0x40020400
 8000f48:	20000080 	.word	0x20000080
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	40020000 	.word	0x40020000

08000f54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f66:	f000 fce7 	bl	8001938 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40001000 	.word	0x40001000

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <Error_Handler+0x8>

08000f84 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f8a:	f000 fa27 	bl	80013dc <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f8e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000f92:	2201      	movs	r2, #1
 8000f94:	2178      	movs	r1, #120	@ 0x78
 8000f96:	485b      	ldr	r0, [pc, #364]	@ (8001104 <SSD1306_Init+0x180>)
 8000f98:	f001 fa14 	bl	80023c4 <HAL_I2C_IsDeviceReady>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e0a9      	b.n	80010fa <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000fa6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000faa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fac:	e002      	b.n	8000fb4 <SSD1306_Init+0x30>
		p--;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f9      	bne.n	8000fae <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000fba:	22ae      	movs	r2, #174	@ 0xae
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2078      	movs	r0, #120	@ 0x78
 8000fc0:	f000 fa88 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2078      	movs	r0, #120	@ 0x78
 8000fca:	f000 fa83 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000fce:	2210      	movs	r2, #16
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2078      	movs	r0, #120	@ 0x78
 8000fd4:	f000 fa7e 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fd8:	22b0      	movs	r2, #176	@ 0xb0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2078      	movs	r0, #120	@ 0x78
 8000fde:	f000 fa79 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000fe2:	22c8      	movs	r2, #200	@ 0xc8
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2078      	movs	r0, #120	@ 0x78
 8000fe8:	f000 fa74 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2078      	movs	r0, #120	@ 0x78
 8000ff2:	f000 fa6f 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000ff6:	2210      	movs	r2, #16
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2078      	movs	r0, #120	@ 0x78
 8000ffc:	f000 fa6a 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001000:	2240      	movs	r2, #64	@ 0x40
 8001002:	2100      	movs	r1, #0
 8001004:	2078      	movs	r0, #120	@ 0x78
 8001006:	f000 fa65 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800100a:	2281      	movs	r2, #129	@ 0x81
 800100c:	2100      	movs	r1, #0
 800100e:	2078      	movs	r0, #120	@ 0x78
 8001010:	f000 fa60 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001014:	22ff      	movs	r2, #255	@ 0xff
 8001016:	2100      	movs	r1, #0
 8001018:	2078      	movs	r0, #120	@ 0x78
 800101a:	f000 fa5b 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800101e:	22a1      	movs	r2, #161	@ 0xa1
 8001020:	2100      	movs	r1, #0
 8001022:	2078      	movs	r0, #120	@ 0x78
 8001024:	f000 fa56 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001028:	22a6      	movs	r2, #166	@ 0xa6
 800102a:	2100      	movs	r1, #0
 800102c:	2078      	movs	r0, #120	@ 0x78
 800102e:	f000 fa51 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001032:	22a8      	movs	r2, #168	@ 0xa8
 8001034:	2100      	movs	r1, #0
 8001036:	2078      	movs	r0, #120	@ 0x78
 8001038:	f000 fa4c 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800103c:	223f      	movs	r2, #63	@ 0x3f
 800103e:	2100      	movs	r1, #0
 8001040:	2078      	movs	r0, #120	@ 0x78
 8001042:	f000 fa47 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001046:	22a4      	movs	r2, #164	@ 0xa4
 8001048:	2100      	movs	r1, #0
 800104a:	2078      	movs	r0, #120	@ 0x78
 800104c:	f000 fa42 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001050:	22d3      	movs	r2, #211	@ 0xd3
 8001052:	2100      	movs	r1, #0
 8001054:	2078      	movs	r0, #120	@ 0x78
 8001056:	f000 fa3d 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	2078      	movs	r0, #120	@ 0x78
 8001060:	f000 fa38 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001064:	22d5      	movs	r2, #213	@ 0xd5
 8001066:	2100      	movs	r1, #0
 8001068:	2078      	movs	r0, #120	@ 0x78
 800106a:	f000 fa33 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800106e:	22f0      	movs	r2, #240	@ 0xf0
 8001070:	2100      	movs	r1, #0
 8001072:	2078      	movs	r0, #120	@ 0x78
 8001074:	f000 fa2e 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001078:	22d9      	movs	r2, #217	@ 0xd9
 800107a:	2100      	movs	r1, #0
 800107c:	2078      	movs	r0, #120	@ 0x78
 800107e:	f000 fa29 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001082:	2222      	movs	r2, #34	@ 0x22
 8001084:	2100      	movs	r1, #0
 8001086:	2078      	movs	r0, #120	@ 0x78
 8001088:	f000 fa24 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800108c:	22da      	movs	r2, #218	@ 0xda
 800108e:	2100      	movs	r1, #0
 8001090:	2078      	movs	r0, #120	@ 0x78
 8001092:	f000 fa1f 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001096:	2212      	movs	r2, #18
 8001098:	2100      	movs	r1, #0
 800109a:	2078      	movs	r0, #120	@ 0x78
 800109c:	f000 fa1a 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80010a0:	22db      	movs	r2, #219	@ 0xdb
 80010a2:	2100      	movs	r1, #0
 80010a4:	2078      	movs	r0, #120	@ 0x78
 80010a6:	f000 fa15 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80010aa:	2220      	movs	r2, #32
 80010ac:	2100      	movs	r1, #0
 80010ae:	2078      	movs	r0, #120	@ 0x78
 80010b0:	f000 fa10 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80010b4:	228d      	movs	r2, #141	@ 0x8d
 80010b6:	2100      	movs	r1, #0
 80010b8:	2078      	movs	r0, #120	@ 0x78
 80010ba:	f000 fa0b 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80010be:	2214      	movs	r2, #20
 80010c0:	2100      	movs	r1, #0
 80010c2:	2078      	movs	r0, #120	@ 0x78
 80010c4:	f000 fa06 	bl	80014d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80010c8:	22af      	movs	r2, #175	@ 0xaf
 80010ca:	2100      	movs	r1, #0
 80010cc:	2078      	movs	r0, #120	@ 0x78
 80010ce:	f000 fa01 	bl	80014d4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80010d2:	222e      	movs	r2, #46	@ 0x2e
 80010d4:	2100      	movs	r1, #0
 80010d6:	2078      	movs	r0, #120	@ 0x78
 80010d8:	f000 f9fc 	bl	80014d4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80010dc:	2000      	movs	r0, #0
 80010de:	f000 f843 	bl	8001168 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80010e2:	f000 f813 	bl	800110c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <SSD1306_Init+0x184>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <SSD1306_Init+0x184>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80010f2:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <SSD1306_Init+0x184>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80010f8:	2301      	movs	r3, #1
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000084 	.word	0x20000084
 8001108:	20000528 	.word	0x20000528

0800110c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001112:	2300      	movs	r3, #0
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	e01d      	b.n	8001154 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	3b50      	subs	r3, #80	@ 0x50
 800111c:	b2db      	uxtb	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	2100      	movs	r1, #0
 8001122:	2078      	movs	r0, #120	@ 0x78
 8001124:	f000 f9d6 	bl	80014d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001128:	2200      	movs	r2, #0
 800112a:	2100      	movs	r1, #0
 800112c:	2078      	movs	r0, #120	@ 0x78
 800112e:	f000 f9d1 	bl	80014d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001132:	2210      	movs	r2, #16
 8001134:	2100      	movs	r1, #0
 8001136:	2078      	movs	r0, #120	@ 0x78
 8001138:	f000 f9cc 	bl	80014d4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	01db      	lsls	r3, r3, #7
 8001140:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <SSD1306_UpdateScreen+0x58>)
 8001142:	441a      	add	r2, r3
 8001144:	2380      	movs	r3, #128	@ 0x80
 8001146:	2140      	movs	r1, #64	@ 0x40
 8001148:	2078      	movs	r0, #120	@ 0x78
 800114a:	f000 f95d 	bl	8001408 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	3301      	adds	r3, #1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b07      	cmp	r3, #7
 8001158:	d9de      	bls.n	8001118 <SSD1306_UpdateScreen+0xc>
	}
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000128 	.word	0x20000128

08001168 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <SSD1306_Fill+0x14>
 8001178:	2300      	movs	r3, #0
 800117a:	e000      	b.n	800117e <SSD1306_Fill+0x16>
 800117c:	23ff      	movs	r3, #255	@ 0xff
 800117e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001182:	4619      	mov	r1, r3
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <SSD1306_Fill+0x2c>)
 8001186:	f003 f98f 	bl	80044a8 <memset>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000128 	.word	0x20000128

08001198 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
 80011a2:	460b      	mov	r3, r1
 80011a4:	80bb      	strh	r3, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	70fb      	strb	r3, [r7, #3]
	if (
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80011ae:	d848      	bhi.n	8001242 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80011b4:	d845      	bhi.n	8001242 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80011b6:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <SSD1306_DrawPixel+0xb8>)
 80011b8:	791b      	ldrb	r3, [r3, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d006      	beq.n	80011cc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	bf0c      	ite	eq
 80011c4:	2301      	moveq	r3, #1
 80011c6:	2300      	movne	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d11a      	bne.n	8001208 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011d2:	88fa      	ldrh	r2, [r7, #6]
 80011d4:	88bb      	ldrh	r3, [r7, #4]
 80011d6:	08db      	lsrs	r3, r3, #3
 80011d8:	b298      	uxth	r0, r3
 80011da:	4603      	mov	r3, r0
 80011dc:	01db      	lsls	r3, r3, #7
 80011de:	4413      	add	r3, r2
 80011e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001254 <SSD1306_DrawPixel+0xbc>)
 80011e2:	5cd3      	ldrb	r3, [r2, r3]
 80011e4:	b25a      	sxtb	r2, r3
 80011e6:	88bb      	ldrh	r3, [r7, #4]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	2101      	movs	r1, #1
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b259      	sxtb	r1, r3
 80011f8:	88fa      	ldrh	r2, [r7, #6]
 80011fa:	4603      	mov	r3, r0
 80011fc:	01db      	lsls	r3, r3, #7
 80011fe:	4413      	add	r3, r2
 8001200:	b2c9      	uxtb	r1, r1
 8001202:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <SSD1306_DrawPixel+0xbc>)
 8001204:	54d1      	strb	r1, [r2, r3]
 8001206:	e01d      	b.n	8001244 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001208:	88fa      	ldrh	r2, [r7, #6]
 800120a:	88bb      	ldrh	r3, [r7, #4]
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	b298      	uxth	r0, r3
 8001210:	4603      	mov	r3, r0
 8001212:	01db      	lsls	r3, r3, #7
 8001214:	4413      	add	r3, r2
 8001216:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <SSD1306_DrawPixel+0xbc>)
 8001218:	5cd3      	ldrb	r3, [r2, r3]
 800121a:	b25a      	sxtb	r2, r3
 800121c:	88bb      	ldrh	r3, [r7, #4]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	2101      	movs	r1, #1
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	b25b      	sxtb	r3, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	b25b      	sxtb	r3, r3
 800122e:	4013      	ands	r3, r2
 8001230:	b259      	sxtb	r1, r3
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	4603      	mov	r3, r0
 8001236:	01db      	lsls	r3, r3, #7
 8001238:	4413      	add	r3, r2
 800123a:	b2c9      	uxtb	r1, r1
 800123c:	4a05      	ldr	r2, [pc, #20]	@ (8001254 <SSD1306_DrawPixel+0xbc>)
 800123e:	54d1      	strb	r1, [r2, r3]
 8001240:	e000      	b.n	8001244 <SSD1306_DrawPixel+0xac>
		return;
 8001242:	bf00      	nop
	}
}
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000528 	.word	0x20000528
 8001254:	20000128 	.word	0x20000128

08001258 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	80fb      	strh	r3, [r7, #6]
 8001264:	4613      	mov	r3, r2
 8001266:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001268:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <SSD1306_GotoXY+0x28>)
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800126e:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <SSD1306_GotoXY+0x28>)
 8001270:	88bb      	ldrh	r3, [r7, #4]
 8001272:	8053      	strh	r3, [r2, #2]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	20000528 	.word	0x20000528

08001284 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4613      	mov	r3, r2
 8001292:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001294:	4b39      	ldr	r3, [pc, #228]	@ (800137c <SSD1306_Putc+0xf8>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
	if (
 80012a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80012a2:	dc07      	bgt.n	80012b4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80012a4:	4b35      	ldr	r3, [pc, #212]	@ (800137c <SSD1306_Putc+0xf8>)
 80012a6:	885b      	ldrh	r3, [r3, #2]
 80012a8:	461a      	mov	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	785b      	ldrb	r3, [r3, #1]
 80012ae:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80012b2:	dd01      	ble.n	80012b8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	e05d      	b.n	8001374 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	e04b      	b.n	8001356 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	3b20      	subs	r3, #32
 80012c6:	6839      	ldr	r1, [r7, #0]
 80012c8:	7849      	ldrb	r1, [r1, #1]
 80012ca:	fb01 f303 	mul.w	r3, r1, r3
 80012ce:	4619      	mov	r1, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	440b      	add	r3, r1
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	e030      	b.n	8001344 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d010      	beq.n	8001314 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012f2:	4b22      	ldr	r3, [pc, #136]	@ (800137c <SSD1306_Putc+0xf8>)
 80012f4:	881a      	ldrh	r2, [r3, #0]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	b298      	uxth	r0, r3
 80012fe:	4b1f      	ldr	r3, [pc, #124]	@ (800137c <SSD1306_Putc+0xf8>)
 8001300:	885a      	ldrh	r2, [r3, #2]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	b29b      	uxth	r3, r3
 800130a:	79ba      	ldrb	r2, [r7, #6]
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff ff43 	bl	8001198 <SSD1306_DrawPixel>
 8001312:	e014      	b.n	800133e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001314:	4b19      	ldr	r3, [pc, #100]	@ (800137c <SSD1306_Putc+0xf8>)
 8001316:	881a      	ldrh	r2, [r3, #0]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	b29b      	uxth	r3, r3
 800131c:	4413      	add	r3, r2
 800131e:	b298      	uxth	r0, r3
 8001320:	4b16      	ldr	r3, [pc, #88]	@ (800137c <SSD1306_Putc+0xf8>)
 8001322:	885a      	ldrh	r2, [r3, #2]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	b29b      	uxth	r3, r3
 8001328:	4413      	add	r3, r2
 800132a:	b299      	uxth	r1, r3
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	2b00      	cmp	r3, #0
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	f7ff ff2d 	bl	8001198 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	3301      	adds	r3, #1
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4293      	cmp	r3, r2
 800134e:	d3c8      	bcc.n	80012e2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	785b      	ldrb	r3, [r3, #1]
 800135a:	461a      	mov	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	4293      	cmp	r3, r2
 8001360:	d3ad      	bcc.n	80012be <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <SSD1306_Putc+0xf8>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	4413      	add	r3, r2
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b03      	ldr	r3, [pc, #12]	@ (800137c <SSD1306_Putc+0xf8>)
 8001370:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001372:	79fb      	ldrb	r3, [r7, #7]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000528 	.word	0x20000528

08001380 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	4613      	mov	r3, r2
 800138c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800138e:	e012      	b.n	80013b6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	79fa      	ldrb	r2, [r7, #7]
 8001396:	68b9      	ldr	r1, [r7, #8]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff73 	bl	8001284 <SSD1306_Putc>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d002      	beq.n	80013b0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	e008      	b.n	80013c2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	3301      	adds	r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1e8      	bne.n	8001390 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	781b      	ldrb	r3, [r3, #0]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff feca 	bl	8001168 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80013d4:	f7ff fe9a 	bl	800110c <SSD1306_UpdateScreen>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <ssd1306_I2C_Init+0x28>)
 80013e4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013e6:	e002      	b.n	80013ee <ssd1306_I2C_Init+0x12>
		p--;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f9      	bne.n	80013e8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	0003d090 	.word	0x0003d090

08001408 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b0c7      	sub	sp, #284	@ 0x11c
 800140c:	af02      	add	r7, sp, #8
 800140e:	4604      	mov	r4, r0
 8001410:	4608      	mov	r0, r1
 8001412:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001416:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800141a:	600a      	str	r2, [r1, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001422:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001426:	4622      	mov	r2, r4
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800142e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001432:	4602      	mov	r2, r0
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800143a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800143e:	460a      	mov	r2, r1
 8001440:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001442:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800144a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800144e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001452:	7812      	ldrb	r2, [r2, #0]
 8001454:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001456:	2300      	movs	r3, #0
 8001458:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800145c:	e015      	b.n	800148a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800145e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001462:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001466:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	441a      	add	r2, r3
 800146e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001472:	3301      	adds	r3, #1
 8001474:	7811      	ldrb	r1, [r2, #0]
 8001476:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800147a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800147e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001480:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001484:	3301      	adds	r3, #1
 8001486:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800148a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800148e:	b29b      	uxth	r3, r3
 8001490:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001494:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001498:	8812      	ldrh	r2, [r2, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d8df      	bhi.n	800145e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800149e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014a2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b299      	uxth	r1, r3
 80014aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	f107 020c 	add.w	r2, r7, #12
 80014bc:	200a      	movs	r0, #10
 80014be:	9000      	str	r0, [sp, #0]
 80014c0:	4803      	ldr	r0, [pc, #12]	@ (80014d0 <ssd1306_I2C_WriteMulti+0xc8>)
 80014c2:	f000 fe81 	bl	80021c8 <HAL_I2C_Master_Transmit>
}
 80014c6:	bf00      	nop
 80014c8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd90      	pop	{r4, r7, pc}
 80014d0:	20000084 	.word	0x20000084

080014d4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af02      	add	r7, sp, #8
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
 80014de:	460b      	mov	r3, r1
 80014e0:	71bb      	strb	r3, [r7, #6]
 80014e2:	4613      	mov	r3, r2
 80014e4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80014ea:	797b      	ldrb	r3, [r7, #5]
 80014ec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	b299      	uxth	r1, r3
 80014f2:	f107 020c 	add.w	r2, r7, #12
 80014f6:	230a      	movs	r3, #10
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2302      	movs	r3, #2
 80014fc:	4803      	ldr	r0, [pc, #12]	@ (800150c <ssd1306_I2C_Write+0x38>)
 80014fe:	f000 fe63 	bl	80021c8 <HAL_I2C_Master_Transmit>
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000084 	.word	0x20000084

08001510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <HAL_MspInit+0x4c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	4a0f      	ldr	r2, [pc, #60]	@ (800155c <HAL_MspInit+0x4c>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001524:	6453      	str	r3, [r2, #68]	@ 0x44
 8001526:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <HAL_MspInit+0x4c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	4a08      	ldr	r2, [pc, #32]	@ (800155c <HAL_MspInit+0x4c>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001540:	6413      	str	r3, [r2, #64]	@ 0x40
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_MspInit+0x4c>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800154e:	2007      	movs	r0, #7
 8001550:	f000 fae3 	bl	8001b1a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a19      	ldr	r2, [pc, #100]	@ (80015e4 <HAL_I2C_MspInit+0x84>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d12c      	bne.n	80015dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <HAL_I2C_MspInit+0x88>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a17      	ldr	r2, [pc, #92]	@ (80015e8 <HAL_I2C_MspInit+0x88>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <HAL_I2C_MspInit+0x88>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800159e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80015a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a4:	2312      	movs	r3, #18
 80015a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015b0:	2304      	movs	r3, #4
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	480c      	ldr	r0, [pc, #48]	@ (80015ec <HAL_I2C_MspInit+0x8c>)
 80015bc:	f000 fae2 	bl	8001b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <HAL_I2C_MspInit+0x88>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c8:	4a07      	ldr	r2, [pc, #28]	@ (80015e8 <HAL_I2C_MspInit+0x88>)
 80015ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d0:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <HAL_I2C_MspInit+0x88>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015dc:	bf00      	nop
 80015de:	3728      	adds	r7, #40	@ 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40005400 	.word	0x40005400
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020400 	.word	0x40020400

080015f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a19      	ldr	r2, [pc, #100]	@ (8001674 <HAL_UART_MspInit+0x84>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d12b      	bne.n	800166a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <HAL_UART_MspInit+0x88>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	4a17      	ldr	r2, [pc, #92]	@ (8001678 <HAL_UART_MspInit+0x88>)
 800161c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001620:	6413      	str	r3, [r2, #64]	@ 0x40
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <HAL_UART_MspInit+0x88>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <HAL_UART_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a10      	ldr	r2, [pc, #64]	@ (8001678 <HAL_UART_MspInit+0x88>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <HAL_UART_MspInit+0x88>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800164a:	230c      	movs	r3, #12
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800165a:	2307      	movs	r3, #7
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	4805      	ldr	r0, [pc, #20]	@ (800167c <HAL_UART_MspInit+0x8c>)
 8001666:	f000 fa8d 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	@ 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40004400 	.word	0x40004400
 8001678:	40023800 	.word	0x40023800
 800167c:	40020000 	.word	0x40020000

08001680 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08e      	sub	sp, #56	@ 0x38
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	4b33      	ldr	r3, [pc, #204]	@ (8001764 <HAL_InitTick+0xe4>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	4a32      	ldr	r2, [pc, #200]	@ (8001764 <HAL_InitTick+0xe4>)
 800169a:	f043 0310 	orr.w	r3, r3, #16
 800169e:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a0:	4b30      	ldr	r3, [pc, #192]	@ (8001764 <HAL_InitTick+0xe4>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ac:	f107 0210 	add.w	r2, r7, #16
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f001 fb28 	bl	8002d0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d103      	bne.n	80016ce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016c6:	f001 faf9 	bl	8002cbc <HAL_RCC_GetPCLK1Freq>
 80016ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80016cc:	e004      	b.n	80016d8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016ce:	f001 faf5 	bl	8002cbc <HAL_RCC_GetPCLK1Freq>
 80016d2:	4603      	mov	r3, r0
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016da:	4a23      	ldr	r2, [pc, #140]	@ (8001768 <HAL_InitTick+0xe8>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	0c9b      	lsrs	r3, r3, #18
 80016e2:	3b01      	subs	r3, #1
 80016e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016e6:	4b21      	ldr	r3, [pc, #132]	@ (800176c <HAL_InitTick+0xec>)
 80016e8:	4a21      	ldr	r2, [pc, #132]	@ (8001770 <HAL_InitTick+0xf0>)
 80016ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <HAL_InitTick+0xec>)
 80016ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016f4:	4a1d      	ldr	r2, [pc, #116]	@ (800176c <HAL_InitTick+0xec>)
 80016f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <HAL_InitTick+0xec>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001700:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <HAL_InitTick+0xec>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001706:	4b19      	ldr	r3, [pc, #100]	@ (800176c <HAL_InitTick+0xec>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800170c:	4817      	ldr	r0, [pc, #92]	@ (800176c <HAL_InitTick+0xec>)
 800170e:	f001 fffd 	bl	800370c <HAL_TIM_Base_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001718:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800171c:	2b00      	cmp	r3, #0
 800171e:	d11b      	bne.n	8001758 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001720:	4812      	ldr	r0, [pc, #72]	@ (800176c <HAL_InitTick+0xec>)
 8001722:	f002 f84d 	bl	80037c0 <HAL_TIM_Base_Start_IT>
 8001726:	4603      	mov	r3, r0
 8001728:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800172c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001730:	2b00      	cmp	r3, #0
 8001732:	d111      	bne.n	8001758 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001734:	2036      	movs	r0, #54	@ 0x36
 8001736:	f000 fa17 	bl	8001b68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d808      	bhi.n	8001752 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	2036      	movs	r0, #54	@ 0x36
 8001746:	f000 f9f3 	bl	8001b30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <HAL_InitTick+0xf4>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	e002      	b.n	8001758 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001758:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800175c:	4618      	mov	r0, r3
 800175e:	3738      	adds	r7, #56	@ 0x38
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023800 	.word	0x40023800
 8001768:	431bde83 	.word	0x431bde83
 800176c:	20000530 	.word	0x20000530
 8001770:	40001000 	.word	0x40001000
 8001774:	2000000c 	.word	0x2000000c

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <NMI_Handler+0x4>

08001780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <MemManage_Handler+0x4>

08001790 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <UsageFault_Handler+0x4>

080017a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KR0_Pin);
 80017dc:	2040      	movs	r0, #64	@ 0x40
 80017de:	f000 fb97 	bl	8001f10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KR1_Pin);
 80017e2:	2080      	movs	r0, #128	@ 0x80
 80017e4:	f000 fb94 	bl	8001f10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KR3_Pin);
 80017e8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80017ec:	f000 fb90 	bl	8001f10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KR2_Pin);
 80017f0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80017f4:	f000 fb8c 	bl	8001f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <TIM6_DAC_IRQHandler+0x10>)
 8001802:	f002 f84d 	bl	80038a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000530 	.word	0x20000530

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	@ (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	@ (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	@ (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f002 fe3a 	bl	80044b8 <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20020000 	.word	0x20020000
 8001870:	00000400 	.word	0x00000400
 8001874:	20000578 	.word	0x20000578
 8001878:	200006c8 	.word	0x200006c8

0800187c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001880:	4b06      	ldr	r3, [pc, #24]	@ (800189c <SystemInit+0x20>)
 8001882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001886:	4a05      	ldr	r2, [pc, #20]	@ (800189c <SystemInit+0x20>)
 8001888:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800188c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018a4:	f7ff ffea 	bl	800187c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a8:	480c      	ldr	r0, [pc, #48]	@ (80018dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018aa:	490d      	ldr	r1, [pc, #52]	@ (80018e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018ac:	4a0d      	ldr	r2, [pc, #52]	@ (80018e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c0:	4c0a      	ldr	r4, [pc, #40]	@ (80018ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018ce:	f002 fdf9 	bl	80044c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7fe fe6d 	bl	80005b0 <main>
  bx  lr    
 80018d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80018e4:	08005bcc 	.word	0x08005bcc
  ldr r2, =_sbss
 80018e8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80018ec:	200006c8 	.word	0x200006c8

080018f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001934 <HAL_Init+0x40>)
 80018fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <HAL_Init+0x40>)
 800190a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800190e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001910:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a07      	ldr	r2, [pc, #28]	@ (8001934 <HAL_Init+0x40>)
 8001916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800191a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f000 f8fc 	bl	8001b1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff feac 	bl	8001680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001928:	f7ff fdf2 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	@ (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000010 	.word	0x20000010
 800195c:	2000057c 	.word	0x2000057c

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	2000057c 	.word	0x2000057c

08001978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff ffee 	bl	8001960 <HAL_GetTick>
 8001984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d005      	beq.n	800199e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001992:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <HAL_Delay+0x44>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800199e:	bf00      	nop
 80019a0:	f7ff ffde 	bl	8001960 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8f7      	bhi.n	80019a0 <HAL_Delay+0x28>
  {
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000010 	.word	0x20000010

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	@ (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	@ (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	@ (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	@ (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	@ 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	@ 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ff4c 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b42:	f7ff ff61 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	6978      	ldr	r0, [r7, #20]
 8001b4e:	f7ff ffb1 	bl	8001ab4 <NVIC_EncodePriority>
 8001b52:	4602      	mov	r2, r0
 8001b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff80 	bl	8001a60 <__NVIC_SetPriority>
}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff54 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	@ 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	e165      	b.n	8001e6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	f040 8154 	bne.w	8001e66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d005      	beq.n	8001bd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d130      	bne.n	8001c38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	2203      	movs	r2, #3
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 0201 	and.w	r2, r3, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d017      	beq.n	8001c74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d123      	bne.n	8001cc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3208      	adds	r2, #8
 8001c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	08da      	lsrs	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3208      	adds	r2, #8
 8001cc2:	69b9      	ldr	r1, [r7, #24]
 8001cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0203 	and.w	r2, r3, #3
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80ae 	beq.w	8001e66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e84 <HAL_GPIO_Init+0x300>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	4a5c      	ldr	r2, [pc, #368]	@ (8001e84 <HAL_GPIO_Init+0x300>)
 8001d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1a:	4b5a      	ldr	r3, [pc, #360]	@ (8001e84 <HAL_GPIO_Init+0x300>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d26:	4a58      	ldr	r2, [pc, #352]	@ (8001e88 <HAL_GPIO_Init+0x304>)
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4f      	ldr	r2, [pc, #316]	@ (8001e8c <HAL_GPIO_Init+0x308>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d025      	beq.n	8001d9e <HAL_GPIO_Init+0x21a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4e      	ldr	r2, [pc, #312]	@ (8001e90 <HAL_GPIO_Init+0x30c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01f      	beq.n	8001d9a <HAL_GPIO_Init+0x216>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e94 <HAL_GPIO_Init+0x310>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d019      	beq.n	8001d96 <HAL_GPIO_Init+0x212>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4c      	ldr	r2, [pc, #304]	@ (8001e98 <HAL_GPIO_Init+0x314>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <HAL_GPIO_Init+0x20e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e9c <HAL_GPIO_Init+0x318>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00d      	beq.n	8001d8e <HAL_GPIO_Init+0x20a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4a      	ldr	r2, [pc, #296]	@ (8001ea0 <HAL_GPIO_Init+0x31c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d007      	beq.n	8001d8a <HAL_GPIO_Init+0x206>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a49      	ldr	r2, [pc, #292]	@ (8001ea4 <HAL_GPIO_Init+0x320>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d101      	bne.n	8001d86 <HAL_GPIO_Init+0x202>
 8001d82:	2306      	movs	r3, #6
 8001d84:	e00c      	b.n	8001da0 <HAL_GPIO_Init+0x21c>
 8001d86:	2307      	movs	r3, #7
 8001d88:	e00a      	b.n	8001da0 <HAL_GPIO_Init+0x21c>
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	e008      	b.n	8001da0 <HAL_GPIO_Init+0x21c>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x21c>
 8001d92:	2303      	movs	r3, #3
 8001d94:	e004      	b.n	8001da0 <HAL_GPIO_Init+0x21c>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e002      	b.n	8001da0 <HAL_GPIO_Init+0x21c>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x21c>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	f002 0203 	and.w	r2, r2, #3
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	4093      	lsls	r3, r2
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db0:	4935      	ldr	r1, [pc, #212]	@ (8001e88 <HAL_GPIO_Init+0x304>)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de2:	4a31      	ldr	r2, [pc, #196]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e0c:	4a26      	ldr	r2, [pc, #152]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e12:	4b25      	ldr	r3, [pc, #148]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e36:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e60:	4a11      	ldr	r2, [pc, #68]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	2b0f      	cmp	r3, #15
 8001e70:	f67f ae96 	bls.w	8001ba0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3724      	adds	r7, #36	@ 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40013800 	.word	0x40013800
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	40020400 	.word	0x40020400
 8001e94:	40020800 	.word	0x40020800
 8001e98:	40020c00 	.word	0x40020c00
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40021400 	.word	0x40021400
 8001ea4:	40021800 	.word	0x40021800
 8001ea8:	40013c00 	.word	0x40013c00

08001eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	e001      	b.n	8001ece <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef8:	e003      	b.n	8001f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	041a      	lsls	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	619a      	str	r2, [r3, #24]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f1a:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f26:	4a05      	ldr	r2, [pc, #20]	@ (8001f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fece 	bl	8000cd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40013c00 	.word	0x40013c00

08001f40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e12b      	b.n	80021aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fafa 	bl	8001560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2224      	movs	r2, #36	@ 0x24
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fa4:	f000 fe8a 	bl	8002cbc <HAL_RCC_GetPCLK1Freq>
 8001fa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a81      	ldr	r2, [pc, #516]	@ (80021b4 <HAL_I2C_Init+0x274>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d807      	bhi.n	8001fc4 <HAL_I2C_Init+0x84>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4a80      	ldr	r2, [pc, #512]	@ (80021b8 <HAL_I2C_Init+0x278>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	bf94      	ite	ls
 8001fbc:	2301      	movls	r3, #1
 8001fbe:	2300      	movhi	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	e006      	b.n	8001fd2 <HAL_I2C_Init+0x92>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4a7d      	ldr	r2, [pc, #500]	@ (80021bc <HAL_I2C_Init+0x27c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	bf94      	ite	ls
 8001fcc:	2301      	movls	r3, #1
 8001fce:	2300      	movhi	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0e7      	b.n	80021aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4a78      	ldr	r2, [pc, #480]	@ (80021c0 <HAL_I2C_Init+0x280>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	0c9b      	lsrs	r3, r3, #18
 8001fe4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a6a      	ldr	r2, [pc, #424]	@ (80021b4 <HAL_I2C_Init+0x274>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d802      	bhi.n	8002014 <HAL_I2C_Init+0xd4>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	3301      	adds	r3, #1
 8002012:	e009      	b.n	8002028 <HAL_I2C_Init+0xe8>
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	4a69      	ldr	r2, [pc, #420]	@ (80021c4 <HAL_I2C_Init+0x284>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	099b      	lsrs	r3, r3, #6
 8002026:	3301      	adds	r3, #1
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	430b      	orrs	r3, r1
 800202e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800203a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	495c      	ldr	r1, [pc, #368]	@ (80021b4 <HAL_I2C_Init+0x274>)
 8002044:	428b      	cmp	r3, r1
 8002046:	d819      	bhi.n	800207c <HAL_I2C_Init+0x13c>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1e59      	subs	r1, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fbb1 f3f3 	udiv	r3, r1, r3
 8002056:	1c59      	adds	r1, r3, #1
 8002058:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800205c:	400b      	ands	r3, r1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <HAL_I2C_Init+0x138>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1e59      	subs	r1, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002070:	3301      	adds	r3, #1
 8002072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002076:	e051      	b.n	800211c <HAL_I2C_Init+0x1dc>
 8002078:	2304      	movs	r3, #4
 800207a:	e04f      	b.n	800211c <HAL_I2C_Init+0x1dc>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d111      	bne.n	80020a8 <HAL_I2C_Init+0x168>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1e58      	subs	r0, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	440b      	add	r3, r1
 8002092:	fbb0 f3f3 	udiv	r3, r0, r3
 8002096:	3301      	adds	r3, #1
 8002098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	e012      	b.n	80020ce <HAL_I2C_Init+0x18e>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1e58      	subs	r0, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	0099      	lsls	r1, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_I2C_Init+0x196>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e022      	b.n	800211c <HAL_I2C_Init+0x1dc>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10e      	bne.n	80020fc <HAL_I2C_Init+0x1bc>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1e58      	subs	r0, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6859      	ldr	r1, [r3, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	440b      	add	r3, r1
 80020ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f0:	3301      	adds	r3, #1
 80020f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020fa:	e00f      	b.n	800211c <HAL_I2C_Init+0x1dc>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1e58      	subs	r0, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	0099      	lsls	r1, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002112:	3301      	adds	r3, #1
 8002114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002118:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	6809      	ldr	r1, [r1, #0]
 8002120:	4313      	orrs	r3, r2
 8002122:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800214a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6911      	ldr	r1, [r2, #16]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68d2      	ldr	r2, [r2, #12]
 8002156:	4311      	orrs	r1, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	430b      	orrs	r3, r1
 800215e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	000186a0 	.word	0x000186a0
 80021b8:	001e847f 	.word	0x001e847f
 80021bc:	003d08ff 	.word	0x003d08ff
 80021c0:	431bde83 	.word	0x431bde83
 80021c4:	10624dd3 	.word	0x10624dd3

080021c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	461a      	mov	r2, r3
 80021d4:	460b      	mov	r3, r1
 80021d6:	817b      	strh	r3, [r7, #10]
 80021d8:	4613      	mov	r3, r2
 80021da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7ff fbc0 	bl	8001960 <HAL_GetTick>
 80021e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	f040 80e0 	bne.w	80023b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2319      	movs	r3, #25
 80021f6:	2201      	movs	r2, #1
 80021f8:	4970      	ldr	r1, [pc, #448]	@ (80023bc <HAL_I2C_Master_Transmit+0x1f4>)
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 fa92 	bl	8002724 <I2C_WaitOnFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002206:	2302      	movs	r3, #2
 8002208:	e0d3      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_I2C_Master_Transmit+0x50>
 8002214:	2302      	movs	r3, #2
 8002216:	e0cc      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b01      	cmp	r3, #1
 800222c:	d007      	beq.n	800223e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800224c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2221      	movs	r2, #33	@ 0x21
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2210      	movs	r2, #16
 800225a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	893a      	ldrh	r2, [r7, #8]
 800226e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a50      	ldr	r2, [pc, #320]	@ (80023c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800227e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002280:	8979      	ldrh	r1, [r7, #10]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	6a3a      	ldr	r2, [r7, #32]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f9ca 	bl	8002620 <I2C_MasterRequestWrite>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e08d      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022ac:	e066      	b.n	800237c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	6a39      	ldr	r1, [r7, #32]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fb50 	bl	8002958 <I2C_WaitOnTXEFlagUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00d      	beq.n	80022da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d107      	bne.n	80022d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e06b      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b04      	cmp	r3, #4
 8002316:	d11b      	bne.n	8002350 <HAL_I2C_Master_Transmit+0x188>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231c:	2b00      	cmp	r3, #0
 800231e:	d017      	beq.n	8002350 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	6a39      	ldr	r1, [r7, #32]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 fb47 	bl	80029e8 <I2C_WaitOnBTFFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00d      	beq.n	800237c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	2b04      	cmp	r3, #4
 8002366:	d107      	bne.n	8002378 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002376:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e01a      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	d194      	bne.n	80022ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e000      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
  }
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	00100002 	.word	0x00100002
 80023c0:	ffff0000 	.word	0xffff0000

080023c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	@ 0x28
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	460b      	mov	r3, r1
 80023d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80023d4:	f7ff fac4 	bl	8001960 <HAL_GetTick>
 80023d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	f040 8111 	bne.w	800260e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2319      	movs	r3, #25
 80023f2:	2201      	movs	r2, #1
 80023f4:	4988      	ldr	r1, [pc, #544]	@ (8002618 <HAL_I2C_IsDeviceReady+0x254>)
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f994 	bl	8002724 <I2C_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002402:	2302      	movs	r3, #2
 8002404:	e104      	b.n	8002610 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_I2C_IsDeviceReady+0x50>
 8002410:	2302      	movs	r3, #2
 8002412:	e0fd      	b.n	8002610 <HAL_I2C_IsDeviceReady+0x24c>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d007      	beq.n	800243a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002448:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2224      	movs	r2, #36	@ 0x24
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a70      	ldr	r2, [pc, #448]	@ (800261c <HAL_I2C_IsDeviceReady+0x258>)
 800245c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800246c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2200      	movs	r2, #0
 8002476:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f952 	bl	8002724 <I2C_WaitOnFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00d      	beq.n	80024a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002494:	d103      	bne.n	800249e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800249c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e0b6      	b.n	8002610 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024a2:	897b      	ldrh	r3, [r7, #10]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80024b2:	f7ff fa55 	bl	8001960 <HAL_GetTick>
 80024b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	bf0c      	ite	eq
 80024c6:	2301      	moveq	r3, #1
 80024c8:	2300      	movne	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024dc:	bf0c      	ite	eq
 80024de:	2301      	moveq	r3, #1
 80024e0:	2300      	movne	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024e6:	e025      	b.n	8002534 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024e8:	f7ff fa3a 	bl	8001960 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d302      	bcc.n	80024fe <HAL_I2C_IsDeviceReady+0x13a>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d103      	bne.n	8002506 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	22a0      	movs	r2, #160	@ 0xa0
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b02      	cmp	r3, #2
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2ba0      	cmp	r3, #160	@ 0xa0
 800253e:	d005      	beq.n	800254c <HAL_I2C_IsDeviceReady+0x188>
 8002540:	7dfb      	ldrb	r3, [r7, #23]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d102      	bne.n	800254c <HAL_I2C_IsDeviceReady+0x188>
 8002546:	7dbb      	ldrb	r3, [r7, #22]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0cd      	beq.n	80024e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b02      	cmp	r3, #2
 8002560:	d129      	bne.n	80025b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002570:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2319      	movs	r3, #25
 800258e:	2201      	movs	r2, #1
 8002590:	4921      	ldr	r1, [pc, #132]	@ (8002618 <HAL_I2C_IsDeviceReady+0x254>)
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f8c6 	bl	8002724 <I2C_WaitOnFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e036      	b.n	8002610 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e02c      	b.n	8002610 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	2319      	movs	r3, #25
 80025d6:	2201      	movs	r2, #1
 80025d8:	490f      	ldr	r1, [pc, #60]	@ (8002618 <HAL_I2C_IsDeviceReady+0x254>)
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f8a2 	bl	8002724 <I2C_WaitOnFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e012      	b.n	8002610 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	3301      	adds	r3, #1
 80025ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	f4ff af32 	bcc.w	800245e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800260e:	2302      	movs	r3, #2
  }
}
 8002610:	4618      	mov	r0, r3
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	00100002 	.word	0x00100002
 800261c:	ffff0000 	.word	0xffff0000

08002620 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	460b      	mov	r3, r1
 800262e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2b08      	cmp	r3, #8
 800263a:	d006      	beq.n	800264a <I2C_MasterRequestWrite+0x2a>
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d003      	beq.n	800264a <I2C_MasterRequestWrite+0x2a>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002648:	d108      	bne.n	800265c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e00b      	b.n	8002674 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002660:	2b12      	cmp	r3, #18
 8002662:	d107      	bne.n	8002674 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002672:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f84f 	bl	8002724 <I2C_WaitOnFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00d      	beq.n	80026a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800269a:	d103      	bne.n	80026a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e035      	b.n	8002714 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026b0:	d108      	bne.n	80026c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026b2:	897b      	ldrh	r3, [r7, #10]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026c0:	611a      	str	r2, [r3, #16]
 80026c2:	e01b      	b.n	80026fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026c4:	897b      	ldrh	r3, [r7, #10]
 80026c6:	11db      	asrs	r3, r3, #7
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	f003 0306 	and.w	r3, r3, #6
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f063 030f 	orn	r3, r3, #15
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	490e      	ldr	r1, [pc, #56]	@ (800271c <I2C_MasterRequestWrite+0xfc>)
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f898 	bl	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e010      	b.n	8002714 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026f2:	897b      	ldrh	r3, [r7, #10]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4907      	ldr	r1, [pc, #28]	@ (8002720 <I2C_MasterRequestWrite+0x100>)
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 f888 	bl	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	00010008 	.word	0x00010008
 8002720:	00010002 	.word	0x00010002

08002724 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002734:	e048      	b.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d044      	beq.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273e:	f7ff f90f 	bl	8001960 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d302      	bcc.n	8002754 <I2C_WaitOnFlagUntilTimeout+0x30>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d139      	bne.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	0c1b      	lsrs	r3, r3, #16
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d10d      	bne.n	800277a <I2C_WaitOnFlagUntilTimeout+0x56>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	43da      	mvns	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4013      	ands	r3, r2
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	e00c      	b.n	8002794 <I2C_WaitOnFlagUntilTimeout+0x70>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	43da      	mvns	r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	4013      	ands	r3, r2
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	429a      	cmp	r2, r3
 8002798:	d116      	bne.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	f043 0220 	orr.w	r2, r3, #32
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e023      	b.n	8002810 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	0c1b      	lsrs	r3, r3, #16
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10d      	bne.n	80027ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	43da      	mvns	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4013      	ands	r3, r2
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	e00c      	b.n	8002808 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	43da      	mvns	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4013      	ands	r3, r2
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	429a      	cmp	r2, r3
 800280c:	d093      	beq.n	8002736 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002826:	e071      	b.n	800290c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002836:	d123      	bne.n	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002846:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002850:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	f043 0204 	orr.w	r2, r3, #4
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e067      	b.n	8002950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002886:	d041      	beq.n	800290c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002888:	f7ff f86a 	bl	8001960 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	429a      	cmp	r2, r3
 8002896:	d302      	bcc.n	800289e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d136      	bne.n	800290c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	0c1b      	lsrs	r3, r3, #16
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d10c      	bne.n	80028c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	43da      	mvns	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	4013      	ands	r3, r2
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	bf14      	ite	ne
 80028ba:	2301      	movne	r3, #1
 80028bc:	2300      	moveq	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	e00b      	b.n	80028da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	43da      	mvns	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4013      	ands	r3, r2
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d016      	beq.n	800290c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	f043 0220 	orr.w	r2, r3, #32
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e021      	b.n	8002950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	0c1b      	lsrs	r3, r3, #16
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	d10c      	bne.n	8002930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	43da      	mvns	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	4013      	ands	r3, r2
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf14      	ite	ne
 8002928:	2301      	movne	r3, #1
 800292a:	2300      	moveq	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	e00b      	b.n	8002948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	43da      	mvns	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4013      	ands	r3, r2
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	bf14      	ite	ne
 8002942:	2301      	movne	r3, #1
 8002944:	2300      	moveq	r3, #0
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	f47f af6d 	bne.w	8002828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002964:	e034      	b.n	80029d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f886 	bl	8002a78 <I2C_IsAcknowledgeFailed>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e034      	b.n	80029e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d028      	beq.n	80029d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297e:	f7fe ffef 	bl	8001960 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	d302      	bcc.n	8002994 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d11d      	bne.n	80029d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299e:	2b80      	cmp	r3, #128	@ 0x80
 80029a0:	d016      	beq.n	80029d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e007      	b.n	80029e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029da:	2b80      	cmp	r3, #128	@ 0x80
 80029dc:	d1c3      	bne.n	8002966 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029f4:	e034      	b.n	8002a60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f83e 	bl	8002a78 <I2C_IsAcknowledgeFailed>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e034      	b.n	8002a70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0c:	d028      	beq.n	8002a60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0e:	f7fe ffa7 	bl	8001960 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d302      	bcc.n	8002a24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d11d      	bne.n	8002a60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d016      	beq.n	8002a60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	f043 0220 	orr.w	r2, r3, #32
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e007      	b.n	8002a70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d1c3      	bne.n	80029f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a8e:	d11b      	bne.n	8002ac8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	f043 0204 	orr.w	r2, r3, #4
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0cc      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aec:	4b68      	ldr	r3, [pc, #416]	@ (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d90c      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b65      	ldr	r3, [pc, #404]	@ (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b63      	ldr	r3, [pc, #396]	@ (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0b8      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d020      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b2c:	4b59      	ldr	r3, [pc, #356]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a58      	ldr	r2, [pc, #352]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b44:	4b53      	ldr	r3, [pc, #332]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4a52      	ldr	r2, [pc, #328]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b50:	4b50      	ldr	r3, [pc, #320]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	494d      	ldr	r1, [pc, #308]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d044      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	4b47      	ldr	r3, [pc, #284]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d119      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e07f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d003      	beq.n	8002b96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	4b3f      	ldr	r3, [pc, #252]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e06f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e067      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb6:	4b37      	ldr	r3, [pc, #220]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f023 0203 	bic.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4934      	ldr	r1, [pc, #208]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc8:	f7fe feca 	bl	8001960 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd0:	f7fe fec6 	bl	8001960 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e04f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 020c 	and.w	r2, r3, #12
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1eb      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b25      	ldr	r3, [pc, #148]	@ (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d20c      	bcs.n	8002c20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b22      	ldr	r3, [pc, #136]	@ (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b20      	ldr	r3, [pc, #128]	@ (8002c90 <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e032      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c2c:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4916      	ldr	r1, [pc, #88]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c4a:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	490e      	ldr	r1, [pc, #56]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c5e:	f000 f887 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002c62:	4602      	mov	r2, r0
 8002c64:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	490a      	ldr	r1, [pc, #40]	@ (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c70:	5ccb      	ldrb	r3, [r1, r3]
 8002c72:	fa22 f303 	lsr.w	r3, r2, r3
 8002c76:	4a09      	ldr	r2, [pc, #36]	@ (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fcfe 	bl	8001680 <HAL_InitTick>

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023c00 	.word	0x40023c00
 8002c94:	40023800 	.word	0x40023800
 8002c98:	08005b70 	.word	0x08005b70
 8002c9c:	20000008 	.word	0x20000008
 8002ca0:	2000000c 	.word	0x2000000c

08002ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	@ (8002cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000008 	.word	0x20000008

08002cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cc0:	f7ff fff0 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	4b05      	ldr	r3, [pc, #20]	@ (8002cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	0a9b      	lsrs	r3, r3, #10
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	4903      	ldr	r1, [pc, #12]	@ (8002ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd2:	5ccb      	ldrb	r3, [r1, r3]
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	08005b80 	.word	0x08005b80

08002ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ce8:	f7ff ffdc 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4b05      	ldr	r3, [pc, #20]	@ (8002d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	0b5b      	lsrs	r3, r3, #13
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	4903      	ldr	r1, [pc, #12]	@ (8002d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfa:	5ccb      	ldrb	r3, [r1, r3]
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40023800 	.word	0x40023800
 8002d08:	08005b80 	.word	0x08005b80

08002d0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	220f      	movs	r2, #15
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d1c:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <HAL_RCC_GetClockConfig+0x5c>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0203 	and.w	r2, r3, #3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d28:	4b0f      	ldr	r3, [pc, #60]	@ (8002d68 <HAL_RCC_GetClockConfig+0x5c>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <HAL_RCC_GetClockConfig+0x5c>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d40:	4b09      	ldr	r3, [pc, #36]	@ (8002d68 <HAL_RCC_GetClockConfig+0x5c>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	08db      	lsrs	r3, r3, #3
 8002d46:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d4e:	4b07      	ldr	r3, [pc, #28]	@ (8002d6c <HAL_RCC_GetClockConfig+0x60>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 020f 	and.w	r2, r3, #15
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	601a      	str	r2, [r3, #0]
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40023c00 	.word	0x40023c00

08002d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d74:	b0ae      	sub	sp, #184	@ 0xb8
 8002d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d96:	4bcb      	ldr	r3, [pc, #812]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	f200 8206 	bhi.w	80031b0 <HAL_RCC_GetSysClockFreq+0x440>
 8002da4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dac <HAL_RCC_GetSysClockFreq+0x3c>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002de1 	.word	0x08002de1
 8002db0:	080031b1 	.word	0x080031b1
 8002db4:	080031b1 	.word	0x080031b1
 8002db8:	080031b1 	.word	0x080031b1
 8002dbc:	08002de9 	.word	0x08002de9
 8002dc0:	080031b1 	.word	0x080031b1
 8002dc4:	080031b1 	.word	0x080031b1
 8002dc8:	080031b1 	.word	0x080031b1
 8002dcc:	08002df1 	.word	0x08002df1
 8002dd0:	080031b1 	.word	0x080031b1
 8002dd4:	080031b1 	.word	0x080031b1
 8002dd8:	080031b1 	.word	0x080031b1
 8002ddc:	08002fe1 	.word	0x08002fe1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002de0:	4bb9      	ldr	r3, [pc, #740]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002de2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002de6:	e1e7      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002de8:	4bb8      	ldr	r3, [pc, #736]	@ (80030cc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002dea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002dee:	e1e3      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002df0:	4bb4      	ldr	r3, [pc, #720]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dfc:	4bb1      	ldr	r3, [pc, #708]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d071      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e08:	4bae      	ldr	r3, [pc, #696]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	099b      	lsrs	r3, r3, #6
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e14:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002e2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e2e:	4622      	mov	r2, r4
 8002e30:	462b      	mov	r3, r5
 8002e32:	f04f 0000 	mov.w	r0, #0
 8002e36:	f04f 0100 	mov.w	r1, #0
 8002e3a:	0159      	lsls	r1, r3, #5
 8002e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e40:	0150      	lsls	r0, r2, #5
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4621      	mov	r1, r4
 8002e48:	1a51      	subs	r1, r2, r1
 8002e4a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e52:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002e60:	4649      	mov	r1, r9
 8002e62:	018b      	lsls	r3, r1, #6
 8002e64:	4641      	mov	r1, r8
 8002e66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e6a:	4641      	mov	r1, r8
 8002e6c:	018a      	lsls	r2, r1, #6
 8002e6e:	4641      	mov	r1, r8
 8002e70:	1a51      	subs	r1, r2, r1
 8002e72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e74:	4649      	mov	r1, r9
 8002e76:	eb63 0301 	sbc.w	r3, r3, r1
 8002e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002e88:	4649      	mov	r1, r9
 8002e8a:	00cb      	lsls	r3, r1, #3
 8002e8c:	4641      	mov	r1, r8
 8002e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e92:	4641      	mov	r1, r8
 8002e94:	00ca      	lsls	r2, r1, #3
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4622      	mov	r2, r4
 8002e9e:	189b      	adds	r3, r3, r2
 8002ea0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ea2:	462b      	mov	r3, r5
 8002ea4:	460a      	mov	r2, r1
 8002ea6:	eb42 0303 	adc.w	r3, r2, r3
 8002eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002eb8:	4629      	mov	r1, r5
 8002eba:	024b      	lsls	r3, r1, #9
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	024a      	lsls	r2, r1, #9
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ed4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ed8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002edc:	f7fd f9f0 	bl	80002c0 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002eea:	e067      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eec:	4b75      	ldr	r3, [pc, #468]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	099b      	lsrs	r3, r3, #6
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ef8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f06:	2300      	movs	r3, #0
 8002f08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f0a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002f0e:	4622      	mov	r2, r4
 8002f10:	462b      	mov	r3, r5
 8002f12:	f04f 0000 	mov.w	r0, #0
 8002f16:	f04f 0100 	mov.w	r1, #0
 8002f1a:	0159      	lsls	r1, r3, #5
 8002f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f20:	0150      	lsls	r0, r2, #5
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4621      	mov	r1, r4
 8002f28:	1a51      	subs	r1, r2, r1
 8002f2a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002f40:	4649      	mov	r1, r9
 8002f42:	018b      	lsls	r3, r1, #6
 8002f44:	4641      	mov	r1, r8
 8002f46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f4a:	4641      	mov	r1, r8
 8002f4c:	018a      	lsls	r2, r1, #6
 8002f4e:	4641      	mov	r1, r8
 8002f50:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f54:	4649      	mov	r1, r9
 8002f56:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f66:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f6e:	4692      	mov	sl, r2
 8002f70:	469b      	mov	fp, r3
 8002f72:	4623      	mov	r3, r4
 8002f74:	eb1a 0303 	adds.w	r3, sl, r3
 8002f78:	623b      	str	r3, [r7, #32]
 8002f7a:	462b      	mov	r3, r5
 8002f7c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f8e:	4629      	mov	r1, r5
 8002f90:	028b      	lsls	r3, r1, #10
 8002f92:	4621      	mov	r1, r4
 8002f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f98:	4621      	mov	r1, r4
 8002f9a:	028a      	lsls	r2, r1, #10
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fa8:	677a      	str	r2, [r7, #116]	@ 0x74
 8002faa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002fae:	f7fd f987 	bl	80002c0 <__aeabi_uldivmod>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fbc:	4b41      	ldr	r3, [pc, #260]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002fce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fde:	e0eb      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe0:	4b38      	ldr	r3, [pc, #224]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fec:	4b35      	ldr	r3, [pc, #212]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d06b      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff8:	4b32      	ldr	r3, [pc, #200]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	2200      	movs	r2, #0
 8003000:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003002:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003004:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800300a:	663b      	str	r3, [r7, #96]	@ 0x60
 800300c:	2300      	movs	r3, #0
 800300e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003010:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003014:	4622      	mov	r2, r4
 8003016:	462b      	mov	r3, r5
 8003018:	f04f 0000 	mov.w	r0, #0
 800301c:	f04f 0100 	mov.w	r1, #0
 8003020:	0159      	lsls	r1, r3, #5
 8003022:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003026:	0150      	lsls	r0, r2, #5
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4621      	mov	r1, r4
 800302e:	1a51      	subs	r1, r2, r1
 8003030:	61b9      	str	r1, [r7, #24]
 8003032:	4629      	mov	r1, r5
 8003034:	eb63 0301 	sbc.w	r3, r3, r1
 8003038:	61fb      	str	r3, [r7, #28]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003046:	4659      	mov	r1, fp
 8003048:	018b      	lsls	r3, r1, #6
 800304a:	4651      	mov	r1, sl
 800304c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003050:	4651      	mov	r1, sl
 8003052:	018a      	lsls	r2, r1, #6
 8003054:	4651      	mov	r1, sl
 8003056:	ebb2 0801 	subs.w	r8, r2, r1
 800305a:	4659      	mov	r1, fp
 800305c:	eb63 0901 	sbc.w	r9, r3, r1
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800306c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003070:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003074:	4690      	mov	r8, r2
 8003076:	4699      	mov	r9, r3
 8003078:	4623      	mov	r3, r4
 800307a:	eb18 0303 	adds.w	r3, r8, r3
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	462b      	mov	r3, r5
 8003082:	eb49 0303 	adc.w	r3, r9, r3
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003094:	4629      	mov	r1, r5
 8003096:	024b      	lsls	r3, r1, #9
 8003098:	4621      	mov	r1, r4
 800309a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800309e:	4621      	mov	r1, r4
 80030a0:	024a      	lsls	r2, r1, #9
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030aa:	2200      	movs	r2, #0
 80030ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80030b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030b4:	f7fd f904 	bl	80002c0 <__aeabi_uldivmod>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4613      	mov	r3, r2
 80030be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030c2:	e065      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x420>
 80030c4:	40023800 	.word	0x40023800
 80030c8:	00f42400 	.word	0x00f42400
 80030cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d0:	4b3d      	ldr	r3, [pc, #244]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	2200      	movs	r2, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	4611      	mov	r1, r2
 80030dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80030e2:	2300      	movs	r3, #0
 80030e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80030e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80030ea:	4642      	mov	r2, r8
 80030ec:	464b      	mov	r3, r9
 80030ee:	f04f 0000 	mov.w	r0, #0
 80030f2:	f04f 0100 	mov.w	r1, #0
 80030f6:	0159      	lsls	r1, r3, #5
 80030f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030fc:	0150      	lsls	r0, r2, #5
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4641      	mov	r1, r8
 8003104:	1a51      	subs	r1, r2, r1
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	4649      	mov	r1, r9
 800310a:	eb63 0301 	sbc.w	r3, r3, r1
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800311c:	4659      	mov	r1, fp
 800311e:	018b      	lsls	r3, r1, #6
 8003120:	4651      	mov	r1, sl
 8003122:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003126:	4651      	mov	r1, sl
 8003128:	018a      	lsls	r2, r1, #6
 800312a:	4651      	mov	r1, sl
 800312c:	1a54      	subs	r4, r2, r1
 800312e:	4659      	mov	r1, fp
 8003130:	eb63 0501 	sbc.w	r5, r3, r1
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	00eb      	lsls	r3, r5, #3
 800313e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003142:	00e2      	lsls	r2, r4, #3
 8003144:	4614      	mov	r4, r2
 8003146:	461d      	mov	r5, r3
 8003148:	4643      	mov	r3, r8
 800314a:	18e3      	adds	r3, r4, r3
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	464b      	mov	r3, r9
 8003150:	eb45 0303 	adc.w	r3, r5, r3
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003162:	4629      	mov	r1, r5
 8003164:	028b      	lsls	r3, r1, #10
 8003166:	4621      	mov	r1, r4
 8003168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800316c:	4621      	mov	r1, r4
 800316e:	028a      	lsls	r2, r1, #10
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003178:	2200      	movs	r2, #0
 800317a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800317c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800317e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003182:	f7fd f89d 	bl	80002c0 <__aeabi_uldivmod>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4613      	mov	r3, r2
 800318c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003190:	4b0d      	ldr	r3, [pc, #52]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	0f1b      	lsrs	r3, r3, #28
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800319e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031ae:	e003      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80031b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	37b8      	adds	r7, #184	@ 0xb8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	00f42400 	.word	0x00f42400

080031d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e28d      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8083 	beq.w	80032f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031f0:	4b94      	ldr	r3, [pc, #592]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d019      	beq.n	8003230 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031fc:	4b91      	ldr	r3, [pc, #580]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003204:	2b08      	cmp	r3, #8
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003208:	4b8e      	ldr	r3, [pc, #568]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003210:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003214:	d00c      	beq.n	8003230 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003216:	4b8b      	ldr	r3, [pc, #556]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d112      	bne.n	8003248 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003222:	4b88      	ldr	r3, [pc, #544]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800322a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800322e:	d10b      	bne.n	8003248 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	4b84      	ldr	r3, [pc, #528]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d05b      	beq.n	80032f4 <HAL_RCC_OscConfig+0x124>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d157      	bne.n	80032f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e25a      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003250:	d106      	bne.n	8003260 <HAL_RCC_OscConfig+0x90>
 8003252:	4b7c      	ldr	r3, [pc, #496]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a7b      	ldr	r2, [pc, #492]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e01d      	b.n	800329c <HAL_RCC_OscConfig+0xcc>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0xb4>
 800326a:	4b76      	ldr	r3, [pc, #472]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a75      	ldr	r2, [pc, #468]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	4b73      	ldr	r3, [pc, #460]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a72      	ldr	r2, [pc, #456]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e00b      	b.n	800329c <HAL_RCC_OscConfig+0xcc>
 8003284:	4b6f      	ldr	r3, [pc, #444]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a6e      	ldr	r2, [pc, #440]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 800328a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	4b6c      	ldr	r3, [pc, #432]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a6b      	ldr	r2, [pc, #428]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800329a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe fb5c 	bl	8001960 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fe fb58 	bl	8001960 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	@ 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e21f      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b61      	ldr	r3, [pc, #388]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0xdc>
 80032ca:	e014      	b.n	80032f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe fb48 	bl	8001960 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fe fb44 	bl	8001960 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	@ 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e20b      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	4b57      	ldr	r3, [pc, #348]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x104>
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d06f      	beq.n	80033e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003302:	4b50      	ldr	r3, [pc, #320]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b00      	cmp	r3, #0
 800330c:	d017      	beq.n	800333e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800330e:	4b4d      	ldr	r3, [pc, #308]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003316:	2b08      	cmp	r3, #8
 8003318:	d105      	bne.n	8003326 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800331a:	4b4a      	ldr	r3, [pc, #296]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003326:	4b47      	ldr	r3, [pc, #284]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d11c      	bne.n	800336c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003332:	4b44      	ldr	r3, [pc, #272]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d116      	bne.n	800336c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	4b41      	ldr	r3, [pc, #260]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x186>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e1d3      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003356:	4b3b      	ldr	r3, [pc, #236]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4937      	ldr	r1, [pc, #220]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	e03a      	b.n	80033e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003374:	4b34      	ldr	r3, [pc, #208]	@ (8003448 <HAL_RCC_OscConfig+0x278>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fe faf1 	bl	8001960 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003382:	f7fe faed 	bl	8001960 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e1b4      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	4b2b      	ldr	r3, [pc, #172]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b28      	ldr	r3, [pc, #160]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4925      	ldr	r1, [pc, #148]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
 80033b4:	e015      	b.n	80033e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b6:	4b24      	ldr	r3, [pc, #144]	@ (8003448 <HAL_RCC_OscConfig+0x278>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe fad0 	bl	8001960 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c4:	f7fe facc 	bl	8001960 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e193      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d036      	beq.n	800345c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f6:	4b15      	ldr	r3, [pc, #84]	@ (800344c <HAL_RCC_OscConfig+0x27c>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fe fab0 	bl	8001960 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003404:	f7fe faac 	bl	8001960 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e173      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003416:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <HAL_RCC_OscConfig+0x274>)
 8003418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x234>
 8003422:	e01b      	b.n	800345c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003424:	4b09      	ldr	r3, [pc, #36]	@ (800344c <HAL_RCC_OscConfig+0x27c>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342a:	f7fe fa99 	bl	8001960 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	e00e      	b.n	8003450 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003432:	f7fe fa95 	bl	8001960 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d907      	bls.n	8003450 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e15c      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
 8003444:	40023800 	.word	0x40023800
 8003448:	42470000 	.word	0x42470000
 800344c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003450:	4b8a      	ldr	r3, [pc, #552]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ea      	bne.n	8003432 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8097 	beq.w	8003598 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346e:	4b83      	ldr	r3, [pc, #524]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	4b7f      	ldr	r3, [pc, #508]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	4a7e      	ldr	r2, [pc, #504]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	@ 0x40
 800348a:	4b7c      	ldr	r3, [pc, #496]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003496:	2301      	movs	r3, #1
 8003498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b79      	ldr	r3, [pc, #484]	@ (8003680 <HAL_RCC_OscConfig+0x4b0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d118      	bne.n	80034d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a6:	4b76      	ldr	r3, [pc, #472]	@ (8003680 <HAL_RCC_OscConfig+0x4b0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a75      	ldr	r2, [pc, #468]	@ (8003680 <HAL_RCC_OscConfig+0x4b0>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b2:	f7fe fa55 	bl	8001960 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ba:	f7fe fa51 	bl	8001960 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e118      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003680 <HAL_RCC_OscConfig+0x4b0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x31e>
 80034e0:	4b66      	ldr	r3, [pc, #408]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e4:	4a65      	ldr	r2, [pc, #404]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ec:	e01c      	b.n	8003528 <HAL_RCC_OscConfig+0x358>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b05      	cmp	r3, #5
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x340>
 80034f6:	4b61      	ldr	r3, [pc, #388]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fa:	4a60      	ldr	r2, [pc, #384]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	f043 0304 	orr.w	r3, r3, #4
 8003500:	6713      	str	r3, [r2, #112]	@ 0x70
 8003502:	4b5e      	ldr	r3, [pc, #376]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003506:	4a5d      	ldr	r2, [pc, #372]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6713      	str	r3, [r2, #112]	@ 0x70
 800350e:	e00b      	b.n	8003528 <HAL_RCC_OscConfig+0x358>
 8003510:	4b5a      	ldr	r3, [pc, #360]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003514:	4a59      	ldr	r2, [pc, #356]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	6713      	str	r3, [r2, #112]	@ 0x70
 800351c:	4b57      	ldr	r3, [pc, #348]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003520:	4a56      	ldr	r2, [pc, #344]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003522:	f023 0304 	bic.w	r3, r3, #4
 8003526:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fe fa16 	bl	8001960 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	e00a      	b.n	800354e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fe fa12 	bl	8001960 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e0d7      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354e:	4b4b      	ldr	r3, [pc, #300]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0ee      	beq.n	8003538 <HAL_RCC_OscConfig+0x368>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fe fa00 	bl	8001960 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003562:	e00a      	b.n	800357a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003564:	f7fe f9fc 	bl	8001960 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e0c1      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357a:	4b40      	ldr	r3, [pc, #256]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1ee      	bne.n	8003564 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358c:	4b3b      	ldr	r3, [pc, #236]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003590:	4a3a      	ldr	r2, [pc, #232]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003596:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80ad 	beq.w	80036fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035a2:	4b36      	ldr	r3, [pc, #216]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d060      	beq.n	8003670 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d145      	bne.n	8003642 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b6:	4b33      	ldr	r3, [pc, #204]	@ (8003684 <HAL_RCC_OscConfig+0x4b4>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fe f9d0 	bl	8001960 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fe f9cc 	bl	8001960 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e093      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d6:	4b29      	ldr	r3, [pc, #164]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	019b      	lsls	r3, r3, #6
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	3b01      	subs	r3, #1
 80035fc:	041b      	lsls	r3, r3, #16
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360c:	071b      	lsls	r3, r3, #28
 800360e:	491b      	ldr	r1, [pc, #108]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003614:	4b1b      	ldr	r3, [pc, #108]	@ (8003684 <HAL_RCC_OscConfig+0x4b4>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361a:	f7fe f9a1 	bl	8001960 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003622:	f7fe f99d 	bl	8001960 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e064      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003634:	4b11      	ldr	r3, [pc, #68]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x452>
 8003640:	e05c      	b.n	80036fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	4b10      	ldr	r3, [pc, #64]	@ (8003684 <HAL_RCC_OscConfig+0x4b4>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe f98a 	bl	8001960 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003650:	f7fe f986 	bl	8001960 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e04d      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	4b06      	ldr	r3, [pc, #24]	@ (800367c <HAL_RCC_OscConfig+0x4ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x480>
 800366e:	e045      	b.n	80036fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d107      	bne.n	8003688 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e040      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
 800367c:	40023800 	.word	0x40023800
 8003680:	40007000 	.word	0x40007000
 8003684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003688:	4b1f      	ldr	r3, [pc, #124]	@ (8003708 <HAL_RCC_OscConfig+0x538>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d030      	beq.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d129      	bne.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d122      	bne.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036b8:	4013      	ands	r3, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d119      	bne.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	3b01      	subs	r3, #1
 80036d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d10f      	bne.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d107      	bne.n	80036f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800

0800370c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e041      	b.n	80037a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f839 	bl	80037aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3304      	adds	r3, #4
 8003748:	4619      	mov	r1, r3
 800374a:	4610      	mov	r0, r2
 800374c:	f000 f9c0 	bl	8003ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d001      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e04e      	b.n	8003876 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0201 	orr.w	r2, r2, #1
 80037ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a23      	ldr	r2, [pc, #140]	@ (8003884 <HAL_TIM_Base_Start_IT+0xc4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d022      	beq.n	8003840 <HAL_TIM_Base_Start_IT+0x80>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003802:	d01d      	beq.n	8003840 <HAL_TIM_Base_Start_IT+0x80>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1f      	ldr	r2, [pc, #124]	@ (8003888 <HAL_TIM_Base_Start_IT+0xc8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d018      	beq.n	8003840 <HAL_TIM_Base_Start_IT+0x80>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1e      	ldr	r2, [pc, #120]	@ (800388c <HAL_TIM_Base_Start_IT+0xcc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <HAL_TIM_Base_Start_IT+0x80>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1c      	ldr	r2, [pc, #112]	@ (8003890 <HAL_TIM_Base_Start_IT+0xd0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00e      	beq.n	8003840 <HAL_TIM_Base_Start_IT+0x80>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1b      	ldr	r2, [pc, #108]	@ (8003894 <HAL_TIM_Base_Start_IT+0xd4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_TIM_Base_Start_IT+0x80>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a19      	ldr	r2, [pc, #100]	@ (8003898 <HAL_TIM_Base_Start_IT+0xd8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_TIM_Base_Start_IT+0x80>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a18      	ldr	r2, [pc, #96]	@ (800389c <HAL_TIM_Base_Start_IT+0xdc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d111      	bne.n	8003864 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b06      	cmp	r3, #6
 8003850:	d010      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003862:	e007      	b.n	8003874 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40010000 	.word	0x40010000
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800
 8003890:	40000c00 	.word	0x40000c00
 8003894:	40010400 	.word	0x40010400
 8003898:	40014000 	.word	0x40014000
 800389c:	40001800 	.word	0x40001800

080038a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d020      	beq.n	8003904 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01b      	beq.n	8003904 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0202 	mvn.w	r2, #2
 80038d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8d2 	bl	8003a94 <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8c4 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f8d5 	bl	8003aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d020      	beq.n	8003950 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01b      	beq.n	8003950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0204 	mvn.w	r2, #4
 8003920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f8ac 	bl	8003a94 <HAL_TIM_IC_CaptureCallback>
 800393c:	e005      	b.n	800394a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f89e 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8af 	bl	8003aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d020      	beq.n	800399c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01b      	beq.n	800399c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0208 	mvn.w	r2, #8
 800396c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2204      	movs	r2, #4
 8003972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f886 	bl	8003a94 <HAL_TIM_IC_CaptureCallback>
 8003988:	e005      	b.n	8003996 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f878 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f889 	bl	8003aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d020      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d01b      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0210 	mvn.w	r2, #16
 80039b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2208      	movs	r2, #8
 80039be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f860 	bl	8003a94 <HAL_TIM_IC_CaptureCallback>
 80039d4:	e005      	b.n	80039e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f852 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f863 	bl	8003aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00c      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0201 	mvn.w	r2, #1
 8003a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd faa4 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00c      	beq.n	8003a30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f906 	bl	8003c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00c      	beq.n	8003a54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f834 	bl	8003abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00c      	beq.n	8003a78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0220 	mvn.w	r2, #32
 8003a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f8d8 	bl	8003c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a46      	ldr	r2, [pc, #280]	@ (8003bfc <TIM_Base_SetConfig+0x12c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d013      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aee:	d00f      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a43      	ldr	r2, [pc, #268]	@ (8003c00 <TIM_Base_SetConfig+0x130>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00b      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a42      	ldr	r2, [pc, #264]	@ (8003c04 <TIM_Base_SetConfig+0x134>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d007      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a41      	ldr	r2, [pc, #260]	@ (8003c08 <TIM_Base_SetConfig+0x138>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d003      	beq.n	8003b10 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a40      	ldr	r2, [pc, #256]	@ (8003c0c <TIM_Base_SetConfig+0x13c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d108      	bne.n	8003b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a35      	ldr	r2, [pc, #212]	@ (8003bfc <TIM_Base_SetConfig+0x12c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d02b      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b30:	d027      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a32      	ldr	r2, [pc, #200]	@ (8003c00 <TIM_Base_SetConfig+0x130>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d023      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a31      	ldr	r2, [pc, #196]	@ (8003c04 <TIM_Base_SetConfig+0x134>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d01f      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a30      	ldr	r2, [pc, #192]	@ (8003c08 <TIM_Base_SetConfig+0x138>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01b      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a2f      	ldr	r2, [pc, #188]	@ (8003c0c <TIM_Base_SetConfig+0x13c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d017      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a2e      	ldr	r2, [pc, #184]	@ (8003c10 <TIM_Base_SetConfig+0x140>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a2d      	ldr	r2, [pc, #180]	@ (8003c14 <TIM_Base_SetConfig+0x144>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00f      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a2c      	ldr	r2, [pc, #176]	@ (8003c18 <TIM_Base_SetConfig+0x148>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00b      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8003c1c <TIM_Base_SetConfig+0x14c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d007      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a2a      	ldr	r2, [pc, #168]	@ (8003c20 <TIM_Base_SetConfig+0x150>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d003      	beq.n	8003b82 <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a29      	ldr	r2, [pc, #164]	@ (8003c24 <TIM_Base_SetConfig+0x154>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d108      	bne.n	8003b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a10      	ldr	r2, [pc, #64]	@ (8003bfc <TIM_Base_SetConfig+0x12c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_Base_SetConfig+0xf8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a12      	ldr	r2, [pc, #72]	@ (8003c0c <TIM_Base_SetConfig+0x13c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d103      	bne.n	8003bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d105      	bne.n	8003bee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f023 0201 	bic.w	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	611a      	str	r2, [r3, #16]
  }
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800
 8003c08:	40000c00 	.word	0x40000c00
 8003c0c:	40010400 	.word	0x40010400
 8003c10:	40014000 	.word	0x40014000
 8003c14:	40014400 	.word	0x40014400
 8003c18:	40014800 	.word	0x40014800
 8003c1c:	40001800 	.word	0x40001800
 8003c20:	40001c00 	.word	0x40001c00
 8003c24:	40002000 	.word	0x40002000

08003c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e042      	b.n	8003ce8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fd fcba 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2224      	movs	r2, #36	@ 0x24
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f973 	bl	8003f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	@ 0x28
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d175      	bne.n	8003dfc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_UART_Transmit+0x2c>
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e06e      	b.n	8003dfe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2221      	movs	r2, #33	@ 0x21
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d2e:	f7fd fe17 	bl	8001960 <HAL_GetTick>
 8003d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	88fa      	ldrh	r2, [r7, #6]
 8003d38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	88fa      	ldrh	r2, [r7, #6]
 8003d3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d48:	d108      	bne.n	8003d5c <HAL_UART_Transmit+0x6c>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d104      	bne.n	8003d5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	e003      	b.n	8003d64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d64:	e02e      	b.n	8003dc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2180      	movs	r1, #128	@ 0x80
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f848 	bl	8003e06 <UART_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e03a      	b.n	8003dfe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10b      	bne.n	8003da6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	3302      	adds	r3, #2
 8003da2:	61bb      	str	r3, [r7, #24]
 8003da4:	e007      	b.n	8003db6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	781a      	ldrb	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	3301      	adds	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1cb      	bne.n	8003d66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2140      	movs	r1, #64	@ 0x40
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f814 	bl	8003e06 <UART_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e006      	b.n	8003dfe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b086      	sub	sp, #24
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	4613      	mov	r3, r2
 8003e14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e16:	e03b      	b.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d037      	beq.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e20:	f7fd fd9e 	bl	8001960 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	6a3a      	ldr	r2, [r7, #32]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d302      	bcc.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e03a      	b.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d023      	beq.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b80      	cmp	r3, #128	@ 0x80
 8003e4c:	d020      	beq.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b40      	cmp	r3, #64	@ 0x40
 8003e52:	d01d      	beq.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d116      	bne.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f81d 	bl	8003eb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2208      	movs	r2, #8
 8003e82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e00f      	b.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d0b4      	beq.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b095      	sub	sp, #84	@ 0x54
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eca:	e853 3f00 	ldrex	r3, [r3]
 8003ece:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ee0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ee6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ee8:	e841 2300 	strex	r3, r2, [r1]
 8003eec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e5      	bne.n	8003ec0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3314      	adds	r3, #20
 8003efa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	e853 3f00 	ldrex	r3, [r3]
 8003f02:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3314      	adds	r3, #20
 8003f12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e5      	bne.n	8003ef4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d119      	bne.n	8003f64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f023 0310 	bic.w	r3, r3, #16
 8003f46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f50:	61ba      	str	r2, [r7, #24]
 8003f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6979      	ldr	r1, [r7, #20]
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e5      	bne.n	8003f30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f72:	bf00      	nop
 8003f74:	3754      	adds	r7, #84	@ 0x54
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f84:	b0c0      	sub	sp, #256	@ 0x100
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9c:	68d9      	ldr	r1, [r3, #12]
 8003f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	ea40 0301 	orr.w	r3, r0, r1
 8003fa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fd8:	f021 010c 	bic.w	r1, r1, #12
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fe6:	430b      	orrs	r3, r1
 8003fe8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffa:	6999      	ldr	r1, [r3, #24]
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	ea40 0301 	orr.w	r3, r0, r1
 8004006:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	4b8f      	ldr	r3, [pc, #572]	@ (800424c <UART_SetConfig+0x2cc>)
 8004010:	429a      	cmp	r2, r3
 8004012:	d005      	beq.n	8004020 <UART_SetConfig+0xa0>
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4b8d      	ldr	r3, [pc, #564]	@ (8004250 <UART_SetConfig+0x2d0>)
 800401c:	429a      	cmp	r2, r3
 800401e:	d104      	bne.n	800402a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004020:	f7fe fe60 	bl	8002ce4 <HAL_RCC_GetPCLK2Freq>
 8004024:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004028:	e003      	b.n	8004032 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800402a:	f7fe fe47 	bl	8002cbc <HAL_RCC_GetPCLK1Freq>
 800402e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800403c:	f040 810c 	bne.w	8004258 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004044:	2200      	movs	r2, #0
 8004046:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800404a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800404e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004052:	4622      	mov	r2, r4
 8004054:	462b      	mov	r3, r5
 8004056:	1891      	adds	r1, r2, r2
 8004058:	65b9      	str	r1, [r7, #88]	@ 0x58
 800405a:	415b      	adcs	r3, r3
 800405c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800405e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004062:	4621      	mov	r1, r4
 8004064:	eb12 0801 	adds.w	r8, r2, r1
 8004068:	4629      	mov	r1, r5
 800406a:	eb43 0901 	adc.w	r9, r3, r1
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800407a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800407e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004082:	4690      	mov	r8, r2
 8004084:	4699      	mov	r9, r3
 8004086:	4623      	mov	r3, r4
 8004088:	eb18 0303 	adds.w	r3, r8, r3
 800408c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004090:	462b      	mov	r3, r5
 8004092:	eb49 0303 	adc.w	r3, r9, r3
 8004096:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800409a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040ae:	460b      	mov	r3, r1
 80040b0:	18db      	adds	r3, r3, r3
 80040b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80040b4:	4613      	mov	r3, r2
 80040b6:	eb42 0303 	adc.w	r3, r2, r3
 80040ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80040bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040c4:	f7fc f8fc 	bl	80002c0 <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4b61      	ldr	r3, [pc, #388]	@ (8004254 <UART_SetConfig+0x2d4>)
 80040ce:	fba3 2302 	umull	r2, r3, r3, r2
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	011c      	lsls	r4, r3, #4
 80040d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040da:	2200      	movs	r2, #0
 80040dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040e8:	4642      	mov	r2, r8
 80040ea:	464b      	mov	r3, r9
 80040ec:	1891      	adds	r1, r2, r2
 80040ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040f0:	415b      	adcs	r3, r3
 80040f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040f8:	4641      	mov	r1, r8
 80040fa:	eb12 0a01 	adds.w	sl, r2, r1
 80040fe:	4649      	mov	r1, r9
 8004100:	eb43 0b01 	adc.w	fp, r3, r1
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004110:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004114:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004118:	4692      	mov	sl, r2
 800411a:	469b      	mov	fp, r3
 800411c:	4643      	mov	r3, r8
 800411e:	eb1a 0303 	adds.w	r3, sl, r3
 8004122:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004126:	464b      	mov	r3, r9
 8004128:	eb4b 0303 	adc.w	r3, fp, r3
 800412c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800413c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004140:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004144:	460b      	mov	r3, r1
 8004146:	18db      	adds	r3, r3, r3
 8004148:	643b      	str	r3, [r7, #64]	@ 0x40
 800414a:	4613      	mov	r3, r2
 800414c:	eb42 0303 	adc.w	r3, r2, r3
 8004150:	647b      	str	r3, [r7, #68]	@ 0x44
 8004152:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004156:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800415a:	f7fc f8b1 	bl	80002c0 <__aeabi_uldivmod>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4611      	mov	r1, r2
 8004164:	4b3b      	ldr	r3, [pc, #236]	@ (8004254 <UART_SetConfig+0x2d4>)
 8004166:	fba3 2301 	umull	r2, r3, r3, r1
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	2264      	movs	r2, #100	@ 0x64
 800416e:	fb02 f303 	mul.w	r3, r2, r3
 8004172:	1acb      	subs	r3, r1, r3
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800417a:	4b36      	ldr	r3, [pc, #216]	@ (8004254 <UART_SetConfig+0x2d4>)
 800417c:	fba3 2302 	umull	r2, r3, r3, r2
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004188:	441c      	add	r4, r3
 800418a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800418e:	2200      	movs	r2, #0
 8004190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004194:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004198:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800419c:	4642      	mov	r2, r8
 800419e:	464b      	mov	r3, r9
 80041a0:	1891      	adds	r1, r2, r2
 80041a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041a4:	415b      	adcs	r3, r3
 80041a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041ac:	4641      	mov	r1, r8
 80041ae:	1851      	adds	r1, r2, r1
 80041b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80041b2:	4649      	mov	r1, r9
 80041b4:	414b      	adcs	r3, r1
 80041b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041c4:	4659      	mov	r1, fp
 80041c6:	00cb      	lsls	r3, r1, #3
 80041c8:	4651      	mov	r1, sl
 80041ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ce:	4651      	mov	r1, sl
 80041d0:	00ca      	lsls	r2, r1, #3
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	4642      	mov	r2, r8
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041e0:	464b      	mov	r3, r9
 80041e2:	460a      	mov	r2, r1
 80041e4:	eb42 0303 	adc.w	r3, r2, r3
 80041e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004200:	460b      	mov	r3, r1
 8004202:	18db      	adds	r3, r3, r3
 8004204:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004206:	4613      	mov	r3, r2
 8004208:	eb42 0303 	adc.w	r3, r2, r3
 800420c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800420e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004212:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004216:	f7fc f853 	bl	80002c0 <__aeabi_uldivmod>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4b0d      	ldr	r3, [pc, #52]	@ (8004254 <UART_SetConfig+0x2d4>)
 8004220:	fba3 1302 	umull	r1, r3, r3, r2
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	2164      	movs	r1, #100	@ 0x64
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	3332      	adds	r3, #50	@ 0x32
 8004232:	4a08      	ldr	r2, [pc, #32]	@ (8004254 <UART_SetConfig+0x2d4>)
 8004234:	fba2 2303 	umull	r2, r3, r2, r3
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	f003 0207 	and.w	r2, r3, #7
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4422      	add	r2, r4
 8004246:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004248:	e106      	b.n	8004458 <UART_SetConfig+0x4d8>
 800424a:	bf00      	nop
 800424c:	40011000 	.word	0x40011000
 8004250:	40011400 	.word	0x40011400
 8004254:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800425c:	2200      	movs	r2, #0
 800425e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004262:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004266:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800426a:	4642      	mov	r2, r8
 800426c:	464b      	mov	r3, r9
 800426e:	1891      	adds	r1, r2, r2
 8004270:	6239      	str	r1, [r7, #32]
 8004272:	415b      	adcs	r3, r3
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
 8004276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800427a:	4641      	mov	r1, r8
 800427c:	1854      	adds	r4, r2, r1
 800427e:	4649      	mov	r1, r9
 8004280:	eb43 0501 	adc.w	r5, r3, r1
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	00eb      	lsls	r3, r5, #3
 800428e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004292:	00e2      	lsls	r2, r4, #3
 8004294:	4614      	mov	r4, r2
 8004296:	461d      	mov	r5, r3
 8004298:	4643      	mov	r3, r8
 800429a:	18e3      	adds	r3, r4, r3
 800429c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042a0:	464b      	mov	r3, r9
 80042a2:	eb45 0303 	adc.w	r3, r5, r3
 80042a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042c6:	4629      	mov	r1, r5
 80042c8:	008b      	lsls	r3, r1, #2
 80042ca:	4621      	mov	r1, r4
 80042cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d0:	4621      	mov	r1, r4
 80042d2:	008a      	lsls	r2, r1, #2
 80042d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042d8:	f7fb fff2 	bl	80002c0 <__aeabi_uldivmod>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	4b60      	ldr	r3, [pc, #384]	@ (8004464 <UART_SetConfig+0x4e4>)
 80042e2:	fba3 2302 	umull	r2, r3, r3, r2
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	011c      	lsls	r4, r3, #4
 80042ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042fc:	4642      	mov	r2, r8
 80042fe:	464b      	mov	r3, r9
 8004300:	1891      	adds	r1, r2, r2
 8004302:	61b9      	str	r1, [r7, #24]
 8004304:	415b      	adcs	r3, r3
 8004306:	61fb      	str	r3, [r7, #28]
 8004308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800430c:	4641      	mov	r1, r8
 800430e:	1851      	adds	r1, r2, r1
 8004310:	6139      	str	r1, [r7, #16]
 8004312:	4649      	mov	r1, r9
 8004314:	414b      	adcs	r3, r1
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004324:	4659      	mov	r1, fp
 8004326:	00cb      	lsls	r3, r1, #3
 8004328:	4651      	mov	r1, sl
 800432a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800432e:	4651      	mov	r1, sl
 8004330:	00ca      	lsls	r2, r1, #3
 8004332:	4610      	mov	r0, r2
 8004334:	4619      	mov	r1, r3
 8004336:	4603      	mov	r3, r0
 8004338:	4642      	mov	r2, r8
 800433a:	189b      	adds	r3, r3, r2
 800433c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004340:	464b      	mov	r3, r9
 8004342:	460a      	mov	r2, r1
 8004344:	eb42 0303 	adc.w	r3, r2, r3
 8004348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004356:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004364:	4649      	mov	r1, r9
 8004366:	008b      	lsls	r3, r1, #2
 8004368:	4641      	mov	r1, r8
 800436a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800436e:	4641      	mov	r1, r8
 8004370:	008a      	lsls	r2, r1, #2
 8004372:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004376:	f7fb ffa3 	bl	80002c0 <__aeabi_uldivmod>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4611      	mov	r1, r2
 8004380:	4b38      	ldr	r3, [pc, #224]	@ (8004464 <UART_SetConfig+0x4e4>)
 8004382:	fba3 2301 	umull	r2, r3, r3, r1
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	2264      	movs	r2, #100	@ 0x64
 800438a:	fb02 f303 	mul.w	r3, r2, r3
 800438e:	1acb      	subs	r3, r1, r3
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	3332      	adds	r3, #50	@ 0x32
 8004394:	4a33      	ldr	r2, [pc, #204]	@ (8004464 <UART_SetConfig+0x4e4>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043a0:	441c      	add	r4, r3
 80043a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043a6:	2200      	movs	r2, #0
 80043a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80043aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80043ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043b0:	4642      	mov	r2, r8
 80043b2:	464b      	mov	r3, r9
 80043b4:	1891      	adds	r1, r2, r2
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	415b      	adcs	r3, r3
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043c0:	4641      	mov	r1, r8
 80043c2:	1851      	adds	r1, r2, r1
 80043c4:	6039      	str	r1, [r7, #0]
 80043c6:	4649      	mov	r1, r9
 80043c8:	414b      	adcs	r3, r1
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043d8:	4659      	mov	r1, fp
 80043da:	00cb      	lsls	r3, r1, #3
 80043dc:	4651      	mov	r1, sl
 80043de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e2:	4651      	mov	r1, sl
 80043e4:	00ca      	lsls	r2, r1, #3
 80043e6:	4610      	mov	r0, r2
 80043e8:	4619      	mov	r1, r3
 80043ea:	4603      	mov	r3, r0
 80043ec:	4642      	mov	r2, r8
 80043ee:	189b      	adds	r3, r3, r2
 80043f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043f2:	464b      	mov	r3, r9
 80043f4:	460a      	mov	r2, r1
 80043f6:	eb42 0303 	adc.w	r3, r2, r3
 80043fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	663b      	str	r3, [r7, #96]	@ 0x60
 8004406:	667a      	str	r2, [r7, #100]	@ 0x64
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004414:	4649      	mov	r1, r9
 8004416:	008b      	lsls	r3, r1, #2
 8004418:	4641      	mov	r1, r8
 800441a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800441e:	4641      	mov	r1, r8
 8004420:	008a      	lsls	r2, r1, #2
 8004422:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004426:	f7fb ff4b 	bl	80002c0 <__aeabi_uldivmod>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4b0d      	ldr	r3, [pc, #52]	@ (8004464 <UART_SetConfig+0x4e4>)
 8004430:	fba3 1302 	umull	r1, r3, r3, r2
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	2164      	movs	r1, #100	@ 0x64
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	3332      	adds	r3, #50	@ 0x32
 8004442:	4a08      	ldr	r2, [pc, #32]	@ (8004464 <UART_SetConfig+0x4e4>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	f003 020f 	and.w	r2, r3, #15
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4422      	add	r2, r4
 8004456:	609a      	str	r2, [r3, #8]
}
 8004458:	bf00      	nop
 800445a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800445e:	46bd      	mov	sp, r7
 8004460:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004464:	51eb851f 	.word	0x51eb851f

08004468 <siprintf>:
 8004468:	b40e      	push	{r1, r2, r3}
 800446a:	b500      	push	{lr}
 800446c:	b09c      	sub	sp, #112	@ 0x70
 800446e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004470:	9002      	str	r0, [sp, #8]
 8004472:	9006      	str	r0, [sp, #24]
 8004474:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004478:	4809      	ldr	r0, [pc, #36]	@ (80044a0 <siprintf+0x38>)
 800447a:	9107      	str	r1, [sp, #28]
 800447c:	9104      	str	r1, [sp, #16]
 800447e:	4909      	ldr	r1, [pc, #36]	@ (80044a4 <siprintf+0x3c>)
 8004480:	f853 2b04 	ldr.w	r2, [r3], #4
 8004484:	9105      	str	r1, [sp, #20]
 8004486:	6800      	ldr	r0, [r0, #0]
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	a902      	add	r1, sp, #8
 800448c:	f000 f994 	bl	80047b8 <_svfiprintf_r>
 8004490:	9b02      	ldr	r3, [sp, #8]
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	b01c      	add	sp, #112	@ 0x70
 8004498:	f85d eb04 	ldr.w	lr, [sp], #4
 800449c:	b003      	add	sp, #12
 800449e:	4770      	bx	lr
 80044a0:	20000014 	.word	0x20000014
 80044a4:	ffff0208 	.word	0xffff0208

080044a8 <memset>:
 80044a8:	4402      	add	r2, r0
 80044aa:	4603      	mov	r3, r0
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d100      	bne.n	80044b2 <memset+0xa>
 80044b0:	4770      	bx	lr
 80044b2:	f803 1b01 	strb.w	r1, [r3], #1
 80044b6:	e7f9      	b.n	80044ac <memset+0x4>

080044b8 <__errno>:
 80044b8:	4b01      	ldr	r3, [pc, #4]	@ (80044c0 <__errno+0x8>)
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000014 	.word	0x20000014

080044c4 <__libc_init_array>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	4d0d      	ldr	r5, [pc, #52]	@ (80044fc <__libc_init_array+0x38>)
 80044c8:	4c0d      	ldr	r4, [pc, #52]	@ (8004500 <__libc_init_array+0x3c>)
 80044ca:	1b64      	subs	r4, r4, r5
 80044cc:	10a4      	asrs	r4, r4, #2
 80044ce:	2600      	movs	r6, #0
 80044d0:	42a6      	cmp	r6, r4
 80044d2:	d109      	bne.n	80044e8 <__libc_init_array+0x24>
 80044d4:	4d0b      	ldr	r5, [pc, #44]	@ (8004504 <__libc_init_array+0x40>)
 80044d6:	4c0c      	ldr	r4, [pc, #48]	@ (8004508 <__libc_init_array+0x44>)
 80044d8:	f000 fc66 	bl	8004da8 <_init>
 80044dc:	1b64      	subs	r4, r4, r5
 80044de:	10a4      	asrs	r4, r4, #2
 80044e0:	2600      	movs	r6, #0
 80044e2:	42a6      	cmp	r6, r4
 80044e4:	d105      	bne.n	80044f2 <__libc_init_array+0x2e>
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ec:	4798      	blx	r3
 80044ee:	3601      	adds	r6, #1
 80044f0:	e7ee      	b.n	80044d0 <__libc_init_array+0xc>
 80044f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f6:	4798      	blx	r3
 80044f8:	3601      	adds	r6, #1
 80044fa:	e7f2      	b.n	80044e2 <__libc_init_array+0x1e>
 80044fc:	08005bc4 	.word	0x08005bc4
 8004500:	08005bc4 	.word	0x08005bc4
 8004504:	08005bc4 	.word	0x08005bc4
 8004508:	08005bc8 	.word	0x08005bc8

0800450c <__retarget_lock_acquire_recursive>:
 800450c:	4770      	bx	lr

0800450e <__retarget_lock_release_recursive>:
 800450e:	4770      	bx	lr

08004510 <_free_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	4605      	mov	r5, r0
 8004514:	2900      	cmp	r1, #0
 8004516:	d041      	beq.n	800459c <_free_r+0x8c>
 8004518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800451c:	1f0c      	subs	r4, r1, #4
 800451e:	2b00      	cmp	r3, #0
 8004520:	bfb8      	it	lt
 8004522:	18e4      	addlt	r4, r4, r3
 8004524:	f000 f8e0 	bl	80046e8 <__malloc_lock>
 8004528:	4a1d      	ldr	r2, [pc, #116]	@ (80045a0 <_free_r+0x90>)
 800452a:	6813      	ldr	r3, [r2, #0]
 800452c:	b933      	cbnz	r3, 800453c <_free_r+0x2c>
 800452e:	6063      	str	r3, [r4, #4]
 8004530:	6014      	str	r4, [r2, #0]
 8004532:	4628      	mov	r0, r5
 8004534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004538:	f000 b8dc 	b.w	80046f4 <__malloc_unlock>
 800453c:	42a3      	cmp	r3, r4
 800453e:	d908      	bls.n	8004552 <_free_r+0x42>
 8004540:	6820      	ldr	r0, [r4, #0]
 8004542:	1821      	adds	r1, r4, r0
 8004544:	428b      	cmp	r3, r1
 8004546:	bf01      	itttt	eq
 8004548:	6819      	ldreq	r1, [r3, #0]
 800454a:	685b      	ldreq	r3, [r3, #4]
 800454c:	1809      	addeq	r1, r1, r0
 800454e:	6021      	streq	r1, [r4, #0]
 8004550:	e7ed      	b.n	800452e <_free_r+0x1e>
 8004552:	461a      	mov	r2, r3
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	b10b      	cbz	r3, 800455c <_free_r+0x4c>
 8004558:	42a3      	cmp	r3, r4
 800455a:	d9fa      	bls.n	8004552 <_free_r+0x42>
 800455c:	6811      	ldr	r1, [r2, #0]
 800455e:	1850      	adds	r0, r2, r1
 8004560:	42a0      	cmp	r0, r4
 8004562:	d10b      	bne.n	800457c <_free_r+0x6c>
 8004564:	6820      	ldr	r0, [r4, #0]
 8004566:	4401      	add	r1, r0
 8004568:	1850      	adds	r0, r2, r1
 800456a:	4283      	cmp	r3, r0
 800456c:	6011      	str	r1, [r2, #0]
 800456e:	d1e0      	bne.n	8004532 <_free_r+0x22>
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	6053      	str	r3, [r2, #4]
 8004576:	4408      	add	r0, r1
 8004578:	6010      	str	r0, [r2, #0]
 800457a:	e7da      	b.n	8004532 <_free_r+0x22>
 800457c:	d902      	bls.n	8004584 <_free_r+0x74>
 800457e:	230c      	movs	r3, #12
 8004580:	602b      	str	r3, [r5, #0]
 8004582:	e7d6      	b.n	8004532 <_free_r+0x22>
 8004584:	6820      	ldr	r0, [r4, #0]
 8004586:	1821      	adds	r1, r4, r0
 8004588:	428b      	cmp	r3, r1
 800458a:	bf04      	itt	eq
 800458c:	6819      	ldreq	r1, [r3, #0]
 800458e:	685b      	ldreq	r3, [r3, #4]
 8004590:	6063      	str	r3, [r4, #4]
 8004592:	bf04      	itt	eq
 8004594:	1809      	addeq	r1, r1, r0
 8004596:	6021      	streq	r1, [r4, #0]
 8004598:	6054      	str	r4, [r2, #4]
 800459a:	e7ca      	b.n	8004532 <_free_r+0x22>
 800459c:	bd38      	pop	{r3, r4, r5, pc}
 800459e:	bf00      	nop
 80045a0:	200006c4 	.word	0x200006c4

080045a4 <sbrk_aligned>:
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	4e0f      	ldr	r6, [pc, #60]	@ (80045e4 <sbrk_aligned+0x40>)
 80045a8:	460c      	mov	r4, r1
 80045aa:	6831      	ldr	r1, [r6, #0]
 80045ac:	4605      	mov	r5, r0
 80045ae:	b911      	cbnz	r1, 80045b6 <sbrk_aligned+0x12>
 80045b0:	f000 fba6 	bl	8004d00 <_sbrk_r>
 80045b4:	6030      	str	r0, [r6, #0]
 80045b6:	4621      	mov	r1, r4
 80045b8:	4628      	mov	r0, r5
 80045ba:	f000 fba1 	bl	8004d00 <_sbrk_r>
 80045be:	1c43      	adds	r3, r0, #1
 80045c0:	d103      	bne.n	80045ca <sbrk_aligned+0x26>
 80045c2:	f04f 34ff 	mov.w	r4, #4294967295
 80045c6:	4620      	mov	r0, r4
 80045c8:	bd70      	pop	{r4, r5, r6, pc}
 80045ca:	1cc4      	adds	r4, r0, #3
 80045cc:	f024 0403 	bic.w	r4, r4, #3
 80045d0:	42a0      	cmp	r0, r4
 80045d2:	d0f8      	beq.n	80045c6 <sbrk_aligned+0x22>
 80045d4:	1a21      	subs	r1, r4, r0
 80045d6:	4628      	mov	r0, r5
 80045d8:	f000 fb92 	bl	8004d00 <_sbrk_r>
 80045dc:	3001      	adds	r0, #1
 80045de:	d1f2      	bne.n	80045c6 <sbrk_aligned+0x22>
 80045e0:	e7ef      	b.n	80045c2 <sbrk_aligned+0x1e>
 80045e2:	bf00      	nop
 80045e4:	200006c0 	.word	0x200006c0

080045e8 <_malloc_r>:
 80045e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045ec:	1ccd      	adds	r5, r1, #3
 80045ee:	f025 0503 	bic.w	r5, r5, #3
 80045f2:	3508      	adds	r5, #8
 80045f4:	2d0c      	cmp	r5, #12
 80045f6:	bf38      	it	cc
 80045f8:	250c      	movcc	r5, #12
 80045fa:	2d00      	cmp	r5, #0
 80045fc:	4606      	mov	r6, r0
 80045fe:	db01      	blt.n	8004604 <_malloc_r+0x1c>
 8004600:	42a9      	cmp	r1, r5
 8004602:	d904      	bls.n	800460e <_malloc_r+0x26>
 8004604:	230c      	movs	r3, #12
 8004606:	6033      	str	r3, [r6, #0]
 8004608:	2000      	movs	r0, #0
 800460a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800460e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046e4 <_malloc_r+0xfc>
 8004612:	f000 f869 	bl	80046e8 <__malloc_lock>
 8004616:	f8d8 3000 	ldr.w	r3, [r8]
 800461a:	461c      	mov	r4, r3
 800461c:	bb44      	cbnz	r4, 8004670 <_malloc_r+0x88>
 800461e:	4629      	mov	r1, r5
 8004620:	4630      	mov	r0, r6
 8004622:	f7ff ffbf 	bl	80045a4 <sbrk_aligned>
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	4604      	mov	r4, r0
 800462a:	d158      	bne.n	80046de <_malloc_r+0xf6>
 800462c:	f8d8 4000 	ldr.w	r4, [r8]
 8004630:	4627      	mov	r7, r4
 8004632:	2f00      	cmp	r7, #0
 8004634:	d143      	bne.n	80046be <_malloc_r+0xd6>
 8004636:	2c00      	cmp	r4, #0
 8004638:	d04b      	beq.n	80046d2 <_malloc_r+0xea>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	4639      	mov	r1, r7
 800463e:	4630      	mov	r0, r6
 8004640:	eb04 0903 	add.w	r9, r4, r3
 8004644:	f000 fb5c 	bl	8004d00 <_sbrk_r>
 8004648:	4581      	cmp	r9, r0
 800464a:	d142      	bne.n	80046d2 <_malloc_r+0xea>
 800464c:	6821      	ldr	r1, [r4, #0]
 800464e:	1a6d      	subs	r5, r5, r1
 8004650:	4629      	mov	r1, r5
 8004652:	4630      	mov	r0, r6
 8004654:	f7ff ffa6 	bl	80045a4 <sbrk_aligned>
 8004658:	3001      	adds	r0, #1
 800465a:	d03a      	beq.n	80046d2 <_malloc_r+0xea>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	442b      	add	r3, r5
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	f8d8 3000 	ldr.w	r3, [r8]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	bb62      	cbnz	r2, 80046c4 <_malloc_r+0xdc>
 800466a:	f8c8 7000 	str.w	r7, [r8]
 800466e:	e00f      	b.n	8004690 <_malloc_r+0xa8>
 8004670:	6822      	ldr	r2, [r4, #0]
 8004672:	1b52      	subs	r2, r2, r5
 8004674:	d420      	bmi.n	80046b8 <_malloc_r+0xd0>
 8004676:	2a0b      	cmp	r2, #11
 8004678:	d917      	bls.n	80046aa <_malloc_r+0xc2>
 800467a:	1961      	adds	r1, r4, r5
 800467c:	42a3      	cmp	r3, r4
 800467e:	6025      	str	r5, [r4, #0]
 8004680:	bf18      	it	ne
 8004682:	6059      	strne	r1, [r3, #4]
 8004684:	6863      	ldr	r3, [r4, #4]
 8004686:	bf08      	it	eq
 8004688:	f8c8 1000 	streq.w	r1, [r8]
 800468c:	5162      	str	r2, [r4, r5]
 800468e:	604b      	str	r3, [r1, #4]
 8004690:	4630      	mov	r0, r6
 8004692:	f000 f82f 	bl	80046f4 <__malloc_unlock>
 8004696:	f104 000b 	add.w	r0, r4, #11
 800469a:	1d23      	adds	r3, r4, #4
 800469c:	f020 0007 	bic.w	r0, r0, #7
 80046a0:	1ac2      	subs	r2, r0, r3
 80046a2:	bf1c      	itt	ne
 80046a4:	1a1b      	subne	r3, r3, r0
 80046a6:	50a3      	strne	r3, [r4, r2]
 80046a8:	e7af      	b.n	800460a <_malloc_r+0x22>
 80046aa:	6862      	ldr	r2, [r4, #4]
 80046ac:	42a3      	cmp	r3, r4
 80046ae:	bf0c      	ite	eq
 80046b0:	f8c8 2000 	streq.w	r2, [r8]
 80046b4:	605a      	strne	r2, [r3, #4]
 80046b6:	e7eb      	b.n	8004690 <_malloc_r+0xa8>
 80046b8:	4623      	mov	r3, r4
 80046ba:	6864      	ldr	r4, [r4, #4]
 80046bc:	e7ae      	b.n	800461c <_malloc_r+0x34>
 80046be:	463c      	mov	r4, r7
 80046c0:	687f      	ldr	r7, [r7, #4]
 80046c2:	e7b6      	b.n	8004632 <_malloc_r+0x4a>
 80046c4:	461a      	mov	r2, r3
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	42a3      	cmp	r3, r4
 80046ca:	d1fb      	bne.n	80046c4 <_malloc_r+0xdc>
 80046cc:	2300      	movs	r3, #0
 80046ce:	6053      	str	r3, [r2, #4]
 80046d0:	e7de      	b.n	8004690 <_malloc_r+0xa8>
 80046d2:	230c      	movs	r3, #12
 80046d4:	6033      	str	r3, [r6, #0]
 80046d6:	4630      	mov	r0, r6
 80046d8:	f000 f80c 	bl	80046f4 <__malloc_unlock>
 80046dc:	e794      	b.n	8004608 <_malloc_r+0x20>
 80046de:	6005      	str	r5, [r0, #0]
 80046e0:	e7d6      	b.n	8004690 <_malloc_r+0xa8>
 80046e2:	bf00      	nop
 80046e4:	200006c4 	.word	0x200006c4

080046e8 <__malloc_lock>:
 80046e8:	4801      	ldr	r0, [pc, #4]	@ (80046f0 <__malloc_lock+0x8>)
 80046ea:	f7ff bf0f 	b.w	800450c <__retarget_lock_acquire_recursive>
 80046ee:	bf00      	nop
 80046f0:	200006bc 	.word	0x200006bc

080046f4 <__malloc_unlock>:
 80046f4:	4801      	ldr	r0, [pc, #4]	@ (80046fc <__malloc_unlock+0x8>)
 80046f6:	f7ff bf0a 	b.w	800450e <__retarget_lock_release_recursive>
 80046fa:	bf00      	nop
 80046fc:	200006bc 	.word	0x200006bc

08004700 <__ssputs_r>:
 8004700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004704:	688e      	ldr	r6, [r1, #8]
 8004706:	461f      	mov	r7, r3
 8004708:	42be      	cmp	r6, r7
 800470a:	680b      	ldr	r3, [r1, #0]
 800470c:	4682      	mov	sl, r0
 800470e:	460c      	mov	r4, r1
 8004710:	4690      	mov	r8, r2
 8004712:	d82d      	bhi.n	8004770 <__ssputs_r+0x70>
 8004714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004718:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800471c:	d026      	beq.n	800476c <__ssputs_r+0x6c>
 800471e:	6965      	ldr	r5, [r4, #20]
 8004720:	6909      	ldr	r1, [r1, #16]
 8004722:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004726:	eba3 0901 	sub.w	r9, r3, r1
 800472a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800472e:	1c7b      	adds	r3, r7, #1
 8004730:	444b      	add	r3, r9
 8004732:	106d      	asrs	r5, r5, #1
 8004734:	429d      	cmp	r5, r3
 8004736:	bf38      	it	cc
 8004738:	461d      	movcc	r5, r3
 800473a:	0553      	lsls	r3, r2, #21
 800473c:	d527      	bpl.n	800478e <__ssputs_r+0x8e>
 800473e:	4629      	mov	r1, r5
 8004740:	f7ff ff52 	bl	80045e8 <_malloc_r>
 8004744:	4606      	mov	r6, r0
 8004746:	b360      	cbz	r0, 80047a2 <__ssputs_r+0xa2>
 8004748:	6921      	ldr	r1, [r4, #16]
 800474a:	464a      	mov	r2, r9
 800474c:	f000 fae8 	bl	8004d20 <memcpy>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800475a:	81a3      	strh	r3, [r4, #12]
 800475c:	6126      	str	r6, [r4, #16]
 800475e:	6165      	str	r5, [r4, #20]
 8004760:	444e      	add	r6, r9
 8004762:	eba5 0509 	sub.w	r5, r5, r9
 8004766:	6026      	str	r6, [r4, #0]
 8004768:	60a5      	str	r5, [r4, #8]
 800476a:	463e      	mov	r6, r7
 800476c:	42be      	cmp	r6, r7
 800476e:	d900      	bls.n	8004772 <__ssputs_r+0x72>
 8004770:	463e      	mov	r6, r7
 8004772:	6820      	ldr	r0, [r4, #0]
 8004774:	4632      	mov	r2, r6
 8004776:	4641      	mov	r1, r8
 8004778:	f000 faa8 	bl	8004ccc <memmove>
 800477c:	68a3      	ldr	r3, [r4, #8]
 800477e:	1b9b      	subs	r3, r3, r6
 8004780:	60a3      	str	r3, [r4, #8]
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	4433      	add	r3, r6
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	2000      	movs	r0, #0
 800478a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478e:	462a      	mov	r2, r5
 8004790:	f000 fad4 	bl	8004d3c <_realloc_r>
 8004794:	4606      	mov	r6, r0
 8004796:	2800      	cmp	r0, #0
 8004798:	d1e0      	bne.n	800475c <__ssputs_r+0x5c>
 800479a:	6921      	ldr	r1, [r4, #16]
 800479c:	4650      	mov	r0, sl
 800479e:	f7ff feb7 	bl	8004510 <_free_r>
 80047a2:	230c      	movs	r3, #12
 80047a4:	f8ca 3000 	str.w	r3, [sl]
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047ae:	81a3      	strh	r3, [r4, #12]
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295
 80047b4:	e7e9      	b.n	800478a <__ssputs_r+0x8a>
	...

080047b8 <_svfiprintf_r>:
 80047b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047bc:	4698      	mov	r8, r3
 80047be:	898b      	ldrh	r3, [r1, #12]
 80047c0:	061b      	lsls	r3, r3, #24
 80047c2:	b09d      	sub	sp, #116	@ 0x74
 80047c4:	4607      	mov	r7, r0
 80047c6:	460d      	mov	r5, r1
 80047c8:	4614      	mov	r4, r2
 80047ca:	d510      	bpl.n	80047ee <_svfiprintf_r+0x36>
 80047cc:	690b      	ldr	r3, [r1, #16]
 80047ce:	b973      	cbnz	r3, 80047ee <_svfiprintf_r+0x36>
 80047d0:	2140      	movs	r1, #64	@ 0x40
 80047d2:	f7ff ff09 	bl	80045e8 <_malloc_r>
 80047d6:	6028      	str	r0, [r5, #0]
 80047d8:	6128      	str	r0, [r5, #16]
 80047da:	b930      	cbnz	r0, 80047ea <_svfiprintf_r+0x32>
 80047dc:	230c      	movs	r3, #12
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	f04f 30ff 	mov.w	r0, #4294967295
 80047e4:	b01d      	add	sp, #116	@ 0x74
 80047e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ea:	2340      	movs	r3, #64	@ 0x40
 80047ec:	616b      	str	r3, [r5, #20]
 80047ee:	2300      	movs	r3, #0
 80047f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80047f2:	2320      	movs	r3, #32
 80047f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80047fc:	2330      	movs	r3, #48	@ 0x30
 80047fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800499c <_svfiprintf_r+0x1e4>
 8004802:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004806:	f04f 0901 	mov.w	r9, #1
 800480a:	4623      	mov	r3, r4
 800480c:	469a      	mov	sl, r3
 800480e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004812:	b10a      	cbz	r2, 8004818 <_svfiprintf_r+0x60>
 8004814:	2a25      	cmp	r2, #37	@ 0x25
 8004816:	d1f9      	bne.n	800480c <_svfiprintf_r+0x54>
 8004818:	ebba 0b04 	subs.w	fp, sl, r4
 800481c:	d00b      	beq.n	8004836 <_svfiprintf_r+0x7e>
 800481e:	465b      	mov	r3, fp
 8004820:	4622      	mov	r2, r4
 8004822:	4629      	mov	r1, r5
 8004824:	4638      	mov	r0, r7
 8004826:	f7ff ff6b 	bl	8004700 <__ssputs_r>
 800482a:	3001      	adds	r0, #1
 800482c:	f000 80a7 	beq.w	800497e <_svfiprintf_r+0x1c6>
 8004830:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004832:	445a      	add	r2, fp
 8004834:	9209      	str	r2, [sp, #36]	@ 0x24
 8004836:	f89a 3000 	ldrb.w	r3, [sl]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 809f 	beq.w	800497e <_svfiprintf_r+0x1c6>
 8004840:	2300      	movs	r3, #0
 8004842:	f04f 32ff 	mov.w	r2, #4294967295
 8004846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800484a:	f10a 0a01 	add.w	sl, sl, #1
 800484e:	9304      	str	r3, [sp, #16]
 8004850:	9307      	str	r3, [sp, #28]
 8004852:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004856:	931a      	str	r3, [sp, #104]	@ 0x68
 8004858:	4654      	mov	r4, sl
 800485a:	2205      	movs	r2, #5
 800485c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004860:	484e      	ldr	r0, [pc, #312]	@ (800499c <_svfiprintf_r+0x1e4>)
 8004862:	f7fb fcdd 	bl	8000220 <memchr>
 8004866:	9a04      	ldr	r2, [sp, #16]
 8004868:	b9d8      	cbnz	r0, 80048a2 <_svfiprintf_r+0xea>
 800486a:	06d0      	lsls	r0, r2, #27
 800486c:	bf44      	itt	mi
 800486e:	2320      	movmi	r3, #32
 8004870:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004874:	0711      	lsls	r1, r2, #28
 8004876:	bf44      	itt	mi
 8004878:	232b      	movmi	r3, #43	@ 0x2b
 800487a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800487e:	f89a 3000 	ldrb.w	r3, [sl]
 8004882:	2b2a      	cmp	r3, #42	@ 0x2a
 8004884:	d015      	beq.n	80048b2 <_svfiprintf_r+0xfa>
 8004886:	9a07      	ldr	r2, [sp, #28]
 8004888:	4654      	mov	r4, sl
 800488a:	2000      	movs	r0, #0
 800488c:	f04f 0c0a 	mov.w	ip, #10
 8004890:	4621      	mov	r1, r4
 8004892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004896:	3b30      	subs	r3, #48	@ 0x30
 8004898:	2b09      	cmp	r3, #9
 800489a:	d94b      	bls.n	8004934 <_svfiprintf_r+0x17c>
 800489c:	b1b0      	cbz	r0, 80048cc <_svfiprintf_r+0x114>
 800489e:	9207      	str	r2, [sp, #28]
 80048a0:	e014      	b.n	80048cc <_svfiprintf_r+0x114>
 80048a2:	eba0 0308 	sub.w	r3, r0, r8
 80048a6:	fa09 f303 	lsl.w	r3, r9, r3
 80048aa:	4313      	orrs	r3, r2
 80048ac:	9304      	str	r3, [sp, #16]
 80048ae:	46a2      	mov	sl, r4
 80048b0:	e7d2      	b.n	8004858 <_svfiprintf_r+0xa0>
 80048b2:	9b03      	ldr	r3, [sp, #12]
 80048b4:	1d19      	adds	r1, r3, #4
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	9103      	str	r1, [sp, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	bfbb      	ittet	lt
 80048be:	425b      	neglt	r3, r3
 80048c0:	f042 0202 	orrlt.w	r2, r2, #2
 80048c4:	9307      	strge	r3, [sp, #28]
 80048c6:	9307      	strlt	r3, [sp, #28]
 80048c8:	bfb8      	it	lt
 80048ca:	9204      	strlt	r2, [sp, #16]
 80048cc:	7823      	ldrb	r3, [r4, #0]
 80048ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80048d0:	d10a      	bne.n	80048e8 <_svfiprintf_r+0x130>
 80048d2:	7863      	ldrb	r3, [r4, #1]
 80048d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80048d6:	d132      	bne.n	800493e <_svfiprintf_r+0x186>
 80048d8:	9b03      	ldr	r3, [sp, #12]
 80048da:	1d1a      	adds	r2, r3, #4
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	9203      	str	r2, [sp, #12]
 80048e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048e4:	3402      	adds	r4, #2
 80048e6:	9305      	str	r3, [sp, #20]
 80048e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80049ac <_svfiprintf_r+0x1f4>
 80048ec:	7821      	ldrb	r1, [r4, #0]
 80048ee:	2203      	movs	r2, #3
 80048f0:	4650      	mov	r0, sl
 80048f2:	f7fb fc95 	bl	8000220 <memchr>
 80048f6:	b138      	cbz	r0, 8004908 <_svfiprintf_r+0x150>
 80048f8:	9b04      	ldr	r3, [sp, #16]
 80048fa:	eba0 000a 	sub.w	r0, r0, sl
 80048fe:	2240      	movs	r2, #64	@ 0x40
 8004900:	4082      	lsls	r2, r0
 8004902:	4313      	orrs	r3, r2
 8004904:	3401      	adds	r4, #1
 8004906:	9304      	str	r3, [sp, #16]
 8004908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800490c:	4824      	ldr	r0, [pc, #144]	@ (80049a0 <_svfiprintf_r+0x1e8>)
 800490e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004912:	2206      	movs	r2, #6
 8004914:	f7fb fc84 	bl	8000220 <memchr>
 8004918:	2800      	cmp	r0, #0
 800491a:	d036      	beq.n	800498a <_svfiprintf_r+0x1d2>
 800491c:	4b21      	ldr	r3, [pc, #132]	@ (80049a4 <_svfiprintf_r+0x1ec>)
 800491e:	bb1b      	cbnz	r3, 8004968 <_svfiprintf_r+0x1b0>
 8004920:	9b03      	ldr	r3, [sp, #12]
 8004922:	3307      	adds	r3, #7
 8004924:	f023 0307 	bic.w	r3, r3, #7
 8004928:	3308      	adds	r3, #8
 800492a:	9303      	str	r3, [sp, #12]
 800492c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800492e:	4433      	add	r3, r6
 8004930:	9309      	str	r3, [sp, #36]	@ 0x24
 8004932:	e76a      	b.n	800480a <_svfiprintf_r+0x52>
 8004934:	fb0c 3202 	mla	r2, ip, r2, r3
 8004938:	460c      	mov	r4, r1
 800493a:	2001      	movs	r0, #1
 800493c:	e7a8      	b.n	8004890 <_svfiprintf_r+0xd8>
 800493e:	2300      	movs	r3, #0
 8004940:	3401      	adds	r4, #1
 8004942:	9305      	str	r3, [sp, #20]
 8004944:	4619      	mov	r1, r3
 8004946:	f04f 0c0a 	mov.w	ip, #10
 800494a:	4620      	mov	r0, r4
 800494c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004950:	3a30      	subs	r2, #48	@ 0x30
 8004952:	2a09      	cmp	r2, #9
 8004954:	d903      	bls.n	800495e <_svfiprintf_r+0x1a6>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0c6      	beq.n	80048e8 <_svfiprintf_r+0x130>
 800495a:	9105      	str	r1, [sp, #20]
 800495c:	e7c4      	b.n	80048e8 <_svfiprintf_r+0x130>
 800495e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004962:	4604      	mov	r4, r0
 8004964:	2301      	movs	r3, #1
 8004966:	e7f0      	b.n	800494a <_svfiprintf_r+0x192>
 8004968:	ab03      	add	r3, sp, #12
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	462a      	mov	r2, r5
 800496e:	4b0e      	ldr	r3, [pc, #56]	@ (80049a8 <_svfiprintf_r+0x1f0>)
 8004970:	a904      	add	r1, sp, #16
 8004972:	4638      	mov	r0, r7
 8004974:	f3af 8000 	nop.w
 8004978:	1c42      	adds	r2, r0, #1
 800497a:	4606      	mov	r6, r0
 800497c:	d1d6      	bne.n	800492c <_svfiprintf_r+0x174>
 800497e:	89ab      	ldrh	r3, [r5, #12]
 8004980:	065b      	lsls	r3, r3, #25
 8004982:	f53f af2d 	bmi.w	80047e0 <_svfiprintf_r+0x28>
 8004986:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004988:	e72c      	b.n	80047e4 <_svfiprintf_r+0x2c>
 800498a:	ab03      	add	r3, sp, #12
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	462a      	mov	r2, r5
 8004990:	4b05      	ldr	r3, [pc, #20]	@ (80049a8 <_svfiprintf_r+0x1f0>)
 8004992:	a904      	add	r1, sp, #16
 8004994:	4638      	mov	r0, r7
 8004996:	f000 f879 	bl	8004a8c <_printf_i>
 800499a:	e7ed      	b.n	8004978 <_svfiprintf_r+0x1c0>
 800499c:	08005b88 	.word	0x08005b88
 80049a0:	08005b92 	.word	0x08005b92
 80049a4:	00000000 	.word	0x00000000
 80049a8:	08004701 	.word	0x08004701
 80049ac:	08005b8e 	.word	0x08005b8e

080049b0 <_printf_common>:
 80049b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b4:	4616      	mov	r6, r2
 80049b6:	4698      	mov	r8, r3
 80049b8:	688a      	ldr	r2, [r1, #8]
 80049ba:	690b      	ldr	r3, [r1, #16]
 80049bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049c0:	4293      	cmp	r3, r2
 80049c2:	bfb8      	it	lt
 80049c4:	4613      	movlt	r3, r2
 80049c6:	6033      	str	r3, [r6, #0]
 80049c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049cc:	4607      	mov	r7, r0
 80049ce:	460c      	mov	r4, r1
 80049d0:	b10a      	cbz	r2, 80049d6 <_printf_common+0x26>
 80049d2:	3301      	adds	r3, #1
 80049d4:	6033      	str	r3, [r6, #0]
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	0699      	lsls	r1, r3, #26
 80049da:	bf42      	ittt	mi
 80049dc:	6833      	ldrmi	r3, [r6, #0]
 80049de:	3302      	addmi	r3, #2
 80049e0:	6033      	strmi	r3, [r6, #0]
 80049e2:	6825      	ldr	r5, [r4, #0]
 80049e4:	f015 0506 	ands.w	r5, r5, #6
 80049e8:	d106      	bne.n	80049f8 <_printf_common+0x48>
 80049ea:	f104 0a19 	add.w	sl, r4, #25
 80049ee:	68e3      	ldr	r3, [r4, #12]
 80049f0:	6832      	ldr	r2, [r6, #0]
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	42ab      	cmp	r3, r5
 80049f6:	dc26      	bgt.n	8004a46 <_printf_common+0x96>
 80049f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049fc:	6822      	ldr	r2, [r4, #0]
 80049fe:	3b00      	subs	r3, #0
 8004a00:	bf18      	it	ne
 8004a02:	2301      	movne	r3, #1
 8004a04:	0692      	lsls	r2, r2, #26
 8004a06:	d42b      	bmi.n	8004a60 <_printf_common+0xb0>
 8004a08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	4638      	mov	r0, r7
 8004a10:	47c8      	blx	r9
 8004a12:	3001      	adds	r0, #1
 8004a14:	d01e      	beq.n	8004a54 <_printf_common+0xa4>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	6922      	ldr	r2, [r4, #16]
 8004a1a:	f003 0306 	and.w	r3, r3, #6
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	bf02      	ittt	eq
 8004a22:	68e5      	ldreq	r5, [r4, #12]
 8004a24:	6833      	ldreq	r3, [r6, #0]
 8004a26:	1aed      	subeq	r5, r5, r3
 8004a28:	68a3      	ldr	r3, [r4, #8]
 8004a2a:	bf0c      	ite	eq
 8004a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a30:	2500      	movne	r5, #0
 8004a32:	4293      	cmp	r3, r2
 8004a34:	bfc4      	itt	gt
 8004a36:	1a9b      	subgt	r3, r3, r2
 8004a38:	18ed      	addgt	r5, r5, r3
 8004a3a:	2600      	movs	r6, #0
 8004a3c:	341a      	adds	r4, #26
 8004a3e:	42b5      	cmp	r5, r6
 8004a40:	d11a      	bne.n	8004a78 <_printf_common+0xc8>
 8004a42:	2000      	movs	r0, #0
 8004a44:	e008      	b.n	8004a58 <_printf_common+0xa8>
 8004a46:	2301      	movs	r3, #1
 8004a48:	4652      	mov	r2, sl
 8004a4a:	4641      	mov	r1, r8
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	47c8      	blx	r9
 8004a50:	3001      	adds	r0, #1
 8004a52:	d103      	bne.n	8004a5c <_printf_common+0xac>
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5c:	3501      	adds	r5, #1
 8004a5e:	e7c6      	b.n	80049ee <_printf_common+0x3e>
 8004a60:	18e1      	adds	r1, r4, r3
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	2030      	movs	r0, #48	@ 0x30
 8004a66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a6a:	4422      	add	r2, r4
 8004a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a74:	3302      	adds	r3, #2
 8004a76:	e7c7      	b.n	8004a08 <_printf_common+0x58>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	4638      	mov	r0, r7
 8004a80:	47c8      	blx	r9
 8004a82:	3001      	adds	r0, #1
 8004a84:	d0e6      	beq.n	8004a54 <_printf_common+0xa4>
 8004a86:	3601      	adds	r6, #1
 8004a88:	e7d9      	b.n	8004a3e <_printf_common+0x8e>
	...

08004a8c <_printf_i>:
 8004a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a90:	7e0f      	ldrb	r7, [r1, #24]
 8004a92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a94:	2f78      	cmp	r7, #120	@ 0x78
 8004a96:	4691      	mov	r9, r2
 8004a98:	4680      	mov	r8, r0
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	469a      	mov	sl, r3
 8004a9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004aa2:	d807      	bhi.n	8004ab4 <_printf_i+0x28>
 8004aa4:	2f62      	cmp	r7, #98	@ 0x62
 8004aa6:	d80a      	bhi.n	8004abe <_printf_i+0x32>
 8004aa8:	2f00      	cmp	r7, #0
 8004aaa:	f000 80d2 	beq.w	8004c52 <_printf_i+0x1c6>
 8004aae:	2f58      	cmp	r7, #88	@ 0x58
 8004ab0:	f000 80b9 	beq.w	8004c26 <_printf_i+0x19a>
 8004ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ab8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004abc:	e03a      	b.n	8004b34 <_printf_i+0xa8>
 8004abe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ac2:	2b15      	cmp	r3, #21
 8004ac4:	d8f6      	bhi.n	8004ab4 <_printf_i+0x28>
 8004ac6:	a101      	add	r1, pc, #4	@ (adr r1, 8004acc <_printf_i+0x40>)
 8004ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004acc:	08004b25 	.word	0x08004b25
 8004ad0:	08004b39 	.word	0x08004b39
 8004ad4:	08004ab5 	.word	0x08004ab5
 8004ad8:	08004ab5 	.word	0x08004ab5
 8004adc:	08004ab5 	.word	0x08004ab5
 8004ae0:	08004ab5 	.word	0x08004ab5
 8004ae4:	08004b39 	.word	0x08004b39
 8004ae8:	08004ab5 	.word	0x08004ab5
 8004aec:	08004ab5 	.word	0x08004ab5
 8004af0:	08004ab5 	.word	0x08004ab5
 8004af4:	08004ab5 	.word	0x08004ab5
 8004af8:	08004c39 	.word	0x08004c39
 8004afc:	08004b63 	.word	0x08004b63
 8004b00:	08004bf3 	.word	0x08004bf3
 8004b04:	08004ab5 	.word	0x08004ab5
 8004b08:	08004ab5 	.word	0x08004ab5
 8004b0c:	08004c5b 	.word	0x08004c5b
 8004b10:	08004ab5 	.word	0x08004ab5
 8004b14:	08004b63 	.word	0x08004b63
 8004b18:	08004ab5 	.word	0x08004ab5
 8004b1c:	08004ab5 	.word	0x08004ab5
 8004b20:	08004bfb 	.word	0x08004bfb
 8004b24:	6833      	ldr	r3, [r6, #0]
 8004b26:	1d1a      	adds	r2, r3, #4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6032      	str	r2, [r6, #0]
 8004b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b34:	2301      	movs	r3, #1
 8004b36:	e09d      	b.n	8004c74 <_printf_i+0x1e8>
 8004b38:	6833      	ldr	r3, [r6, #0]
 8004b3a:	6820      	ldr	r0, [r4, #0]
 8004b3c:	1d19      	adds	r1, r3, #4
 8004b3e:	6031      	str	r1, [r6, #0]
 8004b40:	0606      	lsls	r6, r0, #24
 8004b42:	d501      	bpl.n	8004b48 <_printf_i+0xbc>
 8004b44:	681d      	ldr	r5, [r3, #0]
 8004b46:	e003      	b.n	8004b50 <_printf_i+0xc4>
 8004b48:	0645      	lsls	r5, r0, #25
 8004b4a:	d5fb      	bpl.n	8004b44 <_printf_i+0xb8>
 8004b4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b50:	2d00      	cmp	r5, #0
 8004b52:	da03      	bge.n	8004b5c <_printf_i+0xd0>
 8004b54:	232d      	movs	r3, #45	@ 0x2d
 8004b56:	426d      	negs	r5, r5
 8004b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b5c:	4859      	ldr	r0, [pc, #356]	@ (8004cc4 <_printf_i+0x238>)
 8004b5e:	230a      	movs	r3, #10
 8004b60:	e011      	b.n	8004b86 <_printf_i+0xfa>
 8004b62:	6821      	ldr	r1, [r4, #0]
 8004b64:	6833      	ldr	r3, [r6, #0]
 8004b66:	0608      	lsls	r0, r1, #24
 8004b68:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b6c:	d402      	bmi.n	8004b74 <_printf_i+0xe8>
 8004b6e:	0649      	lsls	r1, r1, #25
 8004b70:	bf48      	it	mi
 8004b72:	b2ad      	uxthmi	r5, r5
 8004b74:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b76:	4853      	ldr	r0, [pc, #332]	@ (8004cc4 <_printf_i+0x238>)
 8004b78:	6033      	str	r3, [r6, #0]
 8004b7a:	bf14      	ite	ne
 8004b7c:	230a      	movne	r3, #10
 8004b7e:	2308      	moveq	r3, #8
 8004b80:	2100      	movs	r1, #0
 8004b82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b86:	6866      	ldr	r6, [r4, #4]
 8004b88:	60a6      	str	r6, [r4, #8]
 8004b8a:	2e00      	cmp	r6, #0
 8004b8c:	bfa2      	ittt	ge
 8004b8e:	6821      	ldrge	r1, [r4, #0]
 8004b90:	f021 0104 	bicge.w	r1, r1, #4
 8004b94:	6021      	strge	r1, [r4, #0]
 8004b96:	b90d      	cbnz	r5, 8004b9c <_printf_i+0x110>
 8004b98:	2e00      	cmp	r6, #0
 8004b9a:	d04b      	beq.n	8004c34 <_printf_i+0x1a8>
 8004b9c:	4616      	mov	r6, r2
 8004b9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ba2:	fb03 5711 	mls	r7, r3, r1, r5
 8004ba6:	5dc7      	ldrb	r7, [r0, r7]
 8004ba8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bac:	462f      	mov	r7, r5
 8004bae:	42bb      	cmp	r3, r7
 8004bb0:	460d      	mov	r5, r1
 8004bb2:	d9f4      	bls.n	8004b9e <_printf_i+0x112>
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d10b      	bne.n	8004bd0 <_printf_i+0x144>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	07df      	lsls	r7, r3, #31
 8004bbc:	d508      	bpl.n	8004bd0 <_printf_i+0x144>
 8004bbe:	6923      	ldr	r3, [r4, #16]
 8004bc0:	6861      	ldr	r1, [r4, #4]
 8004bc2:	4299      	cmp	r1, r3
 8004bc4:	bfde      	ittt	le
 8004bc6:	2330      	movle	r3, #48	@ 0x30
 8004bc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bd0:	1b92      	subs	r2, r2, r6
 8004bd2:	6122      	str	r2, [r4, #16]
 8004bd4:	f8cd a000 	str.w	sl, [sp]
 8004bd8:	464b      	mov	r3, r9
 8004bda:	aa03      	add	r2, sp, #12
 8004bdc:	4621      	mov	r1, r4
 8004bde:	4640      	mov	r0, r8
 8004be0:	f7ff fee6 	bl	80049b0 <_printf_common>
 8004be4:	3001      	adds	r0, #1
 8004be6:	d14a      	bne.n	8004c7e <_printf_i+0x1f2>
 8004be8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bec:	b004      	add	sp, #16
 8004bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	f043 0320 	orr.w	r3, r3, #32
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	4833      	ldr	r0, [pc, #204]	@ (8004cc8 <_printf_i+0x23c>)
 8004bfc:	2778      	movs	r7, #120	@ 0x78
 8004bfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	6831      	ldr	r1, [r6, #0]
 8004c06:	061f      	lsls	r7, r3, #24
 8004c08:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c0c:	d402      	bmi.n	8004c14 <_printf_i+0x188>
 8004c0e:	065f      	lsls	r7, r3, #25
 8004c10:	bf48      	it	mi
 8004c12:	b2ad      	uxthmi	r5, r5
 8004c14:	6031      	str	r1, [r6, #0]
 8004c16:	07d9      	lsls	r1, r3, #31
 8004c18:	bf44      	itt	mi
 8004c1a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c1e:	6023      	strmi	r3, [r4, #0]
 8004c20:	b11d      	cbz	r5, 8004c2a <_printf_i+0x19e>
 8004c22:	2310      	movs	r3, #16
 8004c24:	e7ac      	b.n	8004b80 <_printf_i+0xf4>
 8004c26:	4827      	ldr	r0, [pc, #156]	@ (8004cc4 <_printf_i+0x238>)
 8004c28:	e7e9      	b.n	8004bfe <_printf_i+0x172>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	f023 0320 	bic.w	r3, r3, #32
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	e7f6      	b.n	8004c22 <_printf_i+0x196>
 8004c34:	4616      	mov	r6, r2
 8004c36:	e7bd      	b.n	8004bb4 <_printf_i+0x128>
 8004c38:	6833      	ldr	r3, [r6, #0]
 8004c3a:	6825      	ldr	r5, [r4, #0]
 8004c3c:	6961      	ldr	r1, [r4, #20]
 8004c3e:	1d18      	adds	r0, r3, #4
 8004c40:	6030      	str	r0, [r6, #0]
 8004c42:	062e      	lsls	r6, r5, #24
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	d501      	bpl.n	8004c4c <_printf_i+0x1c0>
 8004c48:	6019      	str	r1, [r3, #0]
 8004c4a:	e002      	b.n	8004c52 <_printf_i+0x1c6>
 8004c4c:	0668      	lsls	r0, r5, #25
 8004c4e:	d5fb      	bpl.n	8004c48 <_printf_i+0x1bc>
 8004c50:	8019      	strh	r1, [r3, #0]
 8004c52:	2300      	movs	r3, #0
 8004c54:	6123      	str	r3, [r4, #16]
 8004c56:	4616      	mov	r6, r2
 8004c58:	e7bc      	b.n	8004bd4 <_printf_i+0x148>
 8004c5a:	6833      	ldr	r3, [r6, #0]
 8004c5c:	1d1a      	adds	r2, r3, #4
 8004c5e:	6032      	str	r2, [r6, #0]
 8004c60:	681e      	ldr	r6, [r3, #0]
 8004c62:	6862      	ldr	r2, [r4, #4]
 8004c64:	2100      	movs	r1, #0
 8004c66:	4630      	mov	r0, r6
 8004c68:	f7fb fada 	bl	8000220 <memchr>
 8004c6c:	b108      	cbz	r0, 8004c72 <_printf_i+0x1e6>
 8004c6e:	1b80      	subs	r0, r0, r6
 8004c70:	6060      	str	r0, [r4, #4]
 8004c72:	6863      	ldr	r3, [r4, #4]
 8004c74:	6123      	str	r3, [r4, #16]
 8004c76:	2300      	movs	r3, #0
 8004c78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c7c:	e7aa      	b.n	8004bd4 <_printf_i+0x148>
 8004c7e:	6923      	ldr	r3, [r4, #16]
 8004c80:	4632      	mov	r2, r6
 8004c82:	4649      	mov	r1, r9
 8004c84:	4640      	mov	r0, r8
 8004c86:	47d0      	blx	sl
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d0ad      	beq.n	8004be8 <_printf_i+0x15c>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	079b      	lsls	r3, r3, #30
 8004c90:	d413      	bmi.n	8004cba <_printf_i+0x22e>
 8004c92:	68e0      	ldr	r0, [r4, #12]
 8004c94:	9b03      	ldr	r3, [sp, #12]
 8004c96:	4298      	cmp	r0, r3
 8004c98:	bfb8      	it	lt
 8004c9a:	4618      	movlt	r0, r3
 8004c9c:	e7a6      	b.n	8004bec <_printf_i+0x160>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4632      	mov	r2, r6
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	4640      	mov	r0, r8
 8004ca6:	47d0      	blx	sl
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d09d      	beq.n	8004be8 <_printf_i+0x15c>
 8004cac:	3501      	adds	r5, #1
 8004cae:	68e3      	ldr	r3, [r4, #12]
 8004cb0:	9903      	ldr	r1, [sp, #12]
 8004cb2:	1a5b      	subs	r3, r3, r1
 8004cb4:	42ab      	cmp	r3, r5
 8004cb6:	dcf2      	bgt.n	8004c9e <_printf_i+0x212>
 8004cb8:	e7eb      	b.n	8004c92 <_printf_i+0x206>
 8004cba:	2500      	movs	r5, #0
 8004cbc:	f104 0619 	add.w	r6, r4, #25
 8004cc0:	e7f5      	b.n	8004cae <_printf_i+0x222>
 8004cc2:	bf00      	nop
 8004cc4:	08005b99 	.word	0x08005b99
 8004cc8:	08005baa 	.word	0x08005baa

08004ccc <memmove>:
 8004ccc:	4288      	cmp	r0, r1
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	eb01 0402 	add.w	r4, r1, r2
 8004cd4:	d902      	bls.n	8004cdc <memmove+0x10>
 8004cd6:	4284      	cmp	r4, r0
 8004cd8:	4623      	mov	r3, r4
 8004cda:	d807      	bhi.n	8004cec <memmove+0x20>
 8004cdc:	1e43      	subs	r3, r0, #1
 8004cde:	42a1      	cmp	r1, r4
 8004ce0:	d008      	beq.n	8004cf4 <memmove+0x28>
 8004ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cea:	e7f8      	b.n	8004cde <memmove+0x12>
 8004cec:	4402      	add	r2, r0
 8004cee:	4601      	mov	r1, r0
 8004cf0:	428a      	cmp	r2, r1
 8004cf2:	d100      	bne.n	8004cf6 <memmove+0x2a>
 8004cf4:	bd10      	pop	{r4, pc}
 8004cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cfe:	e7f7      	b.n	8004cf0 <memmove+0x24>

08004d00 <_sbrk_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4d06      	ldr	r5, [pc, #24]	@ (8004d1c <_sbrk_r+0x1c>)
 8004d04:	2300      	movs	r3, #0
 8004d06:	4604      	mov	r4, r0
 8004d08:	4608      	mov	r0, r1
 8004d0a:	602b      	str	r3, [r5, #0]
 8004d0c:	f7fc fd80 	bl	8001810 <_sbrk>
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	d102      	bne.n	8004d1a <_sbrk_r+0x1a>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	b103      	cbz	r3, 8004d1a <_sbrk_r+0x1a>
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
 8004d1c:	200006b8 	.word	0x200006b8

08004d20 <memcpy>:
 8004d20:	440a      	add	r2, r1
 8004d22:	4291      	cmp	r1, r2
 8004d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d28:	d100      	bne.n	8004d2c <memcpy+0xc>
 8004d2a:	4770      	bx	lr
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d36:	4291      	cmp	r1, r2
 8004d38:	d1f9      	bne.n	8004d2e <memcpy+0xe>
 8004d3a:	bd10      	pop	{r4, pc}

08004d3c <_realloc_r>:
 8004d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d40:	4680      	mov	r8, r0
 8004d42:	4615      	mov	r5, r2
 8004d44:	460c      	mov	r4, r1
 8004d46:	b921      	cbnz	r1, 8004d52 <_realloc_r+0x16>
 8004d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	f7ff bc4b 	b.w	80045e8 <_malloc_r>
 8004d52:	b92a      	cbnz	r2, 8004d60 <_realloc_r+0x24>
 8004d54:	f7ff fbdc 	bl	8004510 <_free_r>
 8004d58:	2400      	movs	r4, #0
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d60:	f000 f81a 	bl	8004d98 <_malloc_usable_size_r>
 8004d64:	4285      	cmp	r5, r0
 8004d66:	4606      	mov	r6, r0
 8004d68:	d802      	bhi.n	8004d70 <_realloc_r+0x34>
 8004d6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d6e:	d8f4      	bhi.n	8004d5a <_realloc_r+0x1e>
 8004d70:	4629      	mov	r1, r5
 8004d72:	4640      	mov	r0, r8
 8004d74:	f7ff fc38 	bl	80045e8 <_malloc_r>
 8004d78:	4607      	mov	r7, r0
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d0ec      	beq.n	8004d58 <_realloc_r+0x1c>
 8004d7e:	42b5      	cmp	r5, r6
 8004d80:	462a      	mov	r2, r5
 8004d82:	4621      	mov	r1, r4
 8004d84:	bf28      	it	cs
 8004d86:	4632      	movcs	r2, r6
 8004d88:	f7ff ffca 	bl	8004d20 <memcpy>
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	4640      	mov	r0, r8
 8004d90:	f7ff fbbe 	bl	8004510 <_free_r>
 8004d94:	463c      	mov	r4, r7
 8004d96:	e7e0      	b.n	8004d5a <_realloc_r+0x1e>

08004d98 <_malloc_usable_size_r>:
 8004d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d9c:	1f18      	subs	r0, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bfbc      	itt	lt
 8004da2:	580b      	ldrlt	r3, [r1, r0]
 8004da4:	18c0      	addlt	r0, r0, r3
 8004da6:	4770      	bx	lr

08004da8 <_init>:
 8004da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004daa:	bf00      	nop
 8004dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dae:	bc08      	pop	{r3}
 8004db0:	469e      	mov	lr, r3
 8004db2:	4770      	bx	lr

08004db4 <_fini>:
 8004db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db6:	bf00      	nop
 8004db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dba:	bc08      	pop	{r3}
 8004dbc:	469e      	mov	lr, r3
 8004dbe:	4770      	bx	lr
